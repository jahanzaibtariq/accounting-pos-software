(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[150],{

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/setup/general.vue?vue&type=script&lang=js&":
/*!*******************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/pages/setup/general.vue?vue&type=script&lang=js& ***!
  \*******************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var vform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vform */ \"./node_modules/vform/dist/vform.common.js\");\n/* harmony import */ var vform__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vform__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var vuex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vuex */ \"./node_modules/vuex/dist/vuex.esm.js\");\n/* harmony import */ var _plugins_i18n__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ~/plugins/i18n */ \"./resources/js/plugins/i18n.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_3__);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  middleware: ['auth', 'check-permissions'],\n  metaInfo: function metaInfo() {\n    return {\n      title: this.$t('setup.general_settings.index.page_title')\n    };\n  },\n  data: function data() {\n    return {\n      allClients: [],\n      allAccounts: [],\n      allVatRates: [],\n      breadcrumbsCurrent: 'setup.general_settings.index.breadcrumbs_current',\n      breadcrumbs: [{\n        name: 'setup.general_settings.index.breadcrumbs_first',\n        url: 'home'\n      }, {\n        name: 'setup.general_settings.index.breadcrumbs_second',\n        url: 'setup.index'\n      }, {\n        name: 'setup.general_settings.index.breadcrumbs_active',\n        url: ''\n      }],\n      form: new vform__WEBPACK_IMPORTED_MODULE_0___default.a({\n        companyName: '',\n        companyTagline: '',\n        emailAddress: '',\n        phoneNumber: '',\n        address: '',\n        clientPrefix: '',\n        supplierPrefix: '',\n        employeePrefix: '',\n        proCatPrefix: '',\n        proSubCatPrefix: '',\n        productPrefix: '',\n        expCatPrefix: '',\n        expSubCatPrefix: '',\n        purchasePrefix: '',\n        purchaseReturnPrefix: '',\n        quotationPrefix: '',\n        invoicePrefix: '',\n        invoiceReturnPrefix: '',\n        adjustmentPrefix: '',\n        currency: '',\n        language: 'en',\n        copyrightText: '',\n        logo: '',\n        blackLogo: '',\n        smallLogo: '',\n        favicon: '',\n        defaultClient: '',\n        defaultAccount: '',\n        defaultVatRate: ''\n      }),\n      logo: '',\n      blackLogo: '',\n      smallLogo: '',\n      favicon: ''\n    };\n  },\n  computed: Object(vuex__WEBPACK_IMPORTED_MODULE_1__[\"mapGetters\"])({\n    appInfo: 'operations/appInfo',\n    items: 'operations/items'\n  }),\n  created: function created() {\n    this.getVatRates();\n    this.getCurrencies();\n    this.getClients();\n    this.getAccounts();\n    this.assignValues();\n  },\n  methods: {\n    // get all product categories\n    getCurrencies: function getCurrencies() {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.$store.dispatch('operations/allData', {\n                path: '/api/all-currencies'\n              });\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    // get all clients\n    getClients: function getClients() {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return axios__WEBPACK_IMPORTED_MODULE_3___default.a.get('/api/all-clients').then(function (response) {\n                _this2.allClients = response.data.data;\n                // assign default client\n                if (_this2.allClients && _this2.allClients.length > 0) {\n                  var defaultClientSlug = _this2.appInfo.defaultClientSlug;\n                  _this2.form.defaultClient = _this2.allClients.find(function (client) {\n                    return client.slug === defaultClientSlug;\n                  });\n                }\n              });\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    },\n    // get all accounts\n    getAccounts: function getAccounts() {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return axios__WEBPACK_IMPORTED_MODULE_3___default.a.get('/api/all-accounts').then(function (response) {\n                _this3.allAccounts = response.data.data;\n                // assign default account\n                if (_this3.allAccounts && _this3.allAccounts.length > 0) {\n                  var defaultAccountSlug = _this3.appInfo.defaultAccountSlug;\n                  _this3.form.defaultAccount = _this3.allAccounts.find(function (account) {\n                    return account.slug === defaultAccountSlug;\n                  });\n                }\n              });\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }))();\n    },\n    // get all vat rates\n    getVatRates: function getVatRates() {\n      var _this4 = this;\n      axios__WEBPACK_IMPORTED_MODULE_3___default.a.get('/api/all-vat-rates').then(function (response) {\n        _this4.allVatRates = response.data.data;\n        // assign default vat rate\n        if (_this4.allVatRates && _this4.allVatRates.length > 0) {\n          var defaultVatRateSlug = _this4.appInfo.defaultVatRateSlug;\n          _this4.form.defaultVatRate = _this4.allVatRates.find(function (tax) {\n            return tax.slug === defaultVatRateSlug;\n          });\n        }\n      });\n    },\n    // assign values\n    assignValues: function assignValues() {\n      if (this.appInfo) {\n        this.form.companyName = this.appInfo.companyName;\n        this.form.companyTagline = this.appInfo.companyTagline;\n        this.form.emailAddress = this.appInfo.email;\n        this.form.phoneNumber = this.appInfo.phone;\n        this.form.address = this.appInfo.address;\n        this.form.clientPrefix = this.appInfo.clientPrefix;\n        this.form.supplierPrefix = this.appInfo.supplierPrefix;\n        this.form.employeePrefix = this.appInfo.employeePrefix;\n        this.form.proCatPrefix = this.appInfo.proCatPrefix;\n        this.form.proSubCatPrefix = this.appInfo.proSubCatPrefix;\n        this.form.productPrefix = this.appInfo.productPrefix;\n        this.form.expCatPrefix = this.appInfo.expCatPrefix;\n        this.form.expSubCatPrefix = this.appInfo.expSubCatPrefix;\n        this.form.purchasePrefix = this.appInfo.purchasePrefix;\n        this.form.purchaseReturnPrefix = this.appInfo.purchaseReturnPrefix;\n        this.form.quotationPrefix = this.appInfo.quotationPrefix;\n        this.form.invoicePrefix = this.appInfo.invoicePrefix;\n        this.form.invoiceReturnPrefix = this.appInfo.invoiceReturnPrefix;\n        this.form.adjustmentPrefix = this.appInfo.adjustmentPrefix;\n        this.form.currency = this.appInfo.currency;\n        this.form.language = this.appInfo.language;\n        this.logo = this.appInfo.logo;\n        this.blackLogo = this.appInfo.blackLogo;\n        this.smallLogo = this.appInfo.smallLogo;\n        this.favicon = this.appInfo.favicon;\n        this.form.copyrightText = this.appInfo.copyright;\n        // set default client executed in getClients()\n        // set default account executed in getAccounts()\n        // set default vat rate executed in getVatRates()\n      }\n    },\n    // vue logo upload\n    onLogoChange: function onLogoChange(e) {\n      var _this5 = this;\n      var file = e.target.files[0];\n      var reader = new FileReader();\n      if (file.size < 2111775 && (file.type === 'image/jpeg' || file.type === 'image/png' || file.type === 'image/gif' || file.type === 'image/svg')) {\n        reader.onloadend = function (file) {\n          _this5.form.logo = reader.result;\n        };\n        reader.readAsDataURL(file);\n        this.logo = URL.createObjectURL(file);\n      } else {\n        Swal.fire(this.$t('common.error'), this.$t('common.image_error'), 'error');\n      }\n    },\n    // vue black logo upload\n    onBlackLogoChange: function onBlackLogoChange(e) {\n      var _this6 = this;\n      var file = e.target.files[0];\n      var reader = new FileReader();\n      if (file.size < 2111775 && (file.type === 'image/jpeg' || file.type === 'image/png' || file.type === 'image/gif' || file.type === 'image/svg')) {\n        reader.onloadend = function (file) {\n          _this6.form.blackLogo = reader.result;\n        };\n        reader.readAsDataURL(file);\n        this.blackLogo = URL.createObjectURL(file);\n      } else {\n        Swal.fire(this.$t('common.error'), this.$t('common.image_error'), 'error');\n      }\n    },\n    // vue small logo upload\n    onSmallLogoChange: function onSmallLogoChange(e) {\n      var _this7 = this;\n      var file = e.target.files[0];\n      var reader = new FileReader();\n      if (file.size < 2111775 && (file.type === 'image/jpeg' || file.type === 'image/png' || file.type === 'image/gif' || file.type === 'image/svg')) {\n        reader.onloadend = function (file) {\n          _this7.form.smallLogo = reader.result;\n        };\n        reader.readAsDataURL(file);\n        this.smallLogo = URL.createObjectURL(file);\n      } else {\n        Swal.fire(this.$t('common.error'), this.$t('common.image_error'), 'error');\n      }\n    },\n    // vue favicon upload\n    onFaviconChange: function onFaviconChange(e) {\n      var _this8 = this;\n      var file = e.target.files[0];\n      var reader = new FileReader();\n      if (file.size < 2111775 && (file.type === 'image/jpeg' || file.type === 'image/png' || file.type === 'image/gif')) {\n        reader.onloadend = function (file) {\n          _this8.form.favicon = reader.result;\n        };\n        reader.readAsDataURL(file);\n        this.favicon = URL.createObjectURL(file);\n      } else {\n        Swal.fire(this.$t('common.error'), this.$t('common.image_error'), 'error');\n      }\n    },\n    // update settings\n    updateSettings: function updateSettings() {\n      var _this9 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var locale;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              // update locale\n              locale = _this9.form.language;\n              if (_this9.$i18n.locale !== locale) {\n                Object(_plugins_i18n__WEBPACK_IMPORTED_MODULE_2__[\"loadMessages\"])(locale);\n                _this9.$store.dispatch('lang/setLocale', {\n                  locale: locale\n                });\n              }\n              _context4.next = 4;\n              return _this9.form.post(window.location.origin + '/api/update-settings').then(function (response) {\n                console.log(response.data);\n                toast.fire({\n                  type: 'success',\n                  title: _this9.$t('setup.general_settings.index.success_message')\n                });\n                window.location.reload();\n              })[\"catch\"](function () {\n                toast.fire({\n                  type: 'error',\n                  title: _this9.$t('common.error_msg')\n                });\n              });\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }))();\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/setup/general.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/setup/general.vue?vue&type=template&id=7cfa81bd&scoped=true&":
/*!*****************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/pages/setup/general.vue?vue&type=template&id=7cfa81bd&scoped=true& ***!
  \*****************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"div\", [_c(\"breadcrumbs\", {\n    attrs: {\n      items: _vm.breadcrumbs,\n      current: _vm.breadcrumbsCurrent\n    }\n  }), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"row\"\n  }, [_c(\"div\", {\n    staticClass: \"col-lg-12\"\n  }, [_c(\"div\", {\n    staticClass: \"card\"\n  }, [_c(\"div\", {\n    staticClass: \"card-header\"\n  }, [_c(\"h3\", {\n    staticClass: \"card-title\"\n  }, [_vm._v(\"\\n            \" + _vm._s(_vm.$t(\"setup.general_settings.index.page_title\")) + \"\\n          \")]), _vm._v(\" \"), _c(\"router-link\", {\n    staticClass: \"btn btn-dark float-right\",\n    attrs: {\n      to: {\n        name: \"setup.index\"\n      }\n    }\n  }, [_c(\"i\", {\n    staticClass: \"fas fa-long-arrow-alt-left\"\n  }), _vm._v(\" \" + _vm._s(_vm.$t(\"common.back\")) + \"\\n          \")])], 1), _vm._v(\" \"), _c(\"form\", {\n    attrs: {\n      role: \"form\"\n    },\n    on: {\n      submit: function submit($event) {\n        $event.preventDefault();\n        return _vm.updateSettings.apply(null, arguments);\n      },\n      keydown: function keydown($event) {\n        return _vm.form.onKeydown($event);\n      }\n    }\n  }, [_c(\"div\", {\n    staticClass: \"card-body\"\n  }, [_c(\"strong\", [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.company_info.info_title\")))]), _vm._v(\" \"), _c(\"hr\"), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"row\"\n  }, [_c(\"div\", {\n    staticClass: \"form-group col-md-6\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"companyName\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.company_name\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.companyName,\n      expression: \"form.companyName\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"companyName\")\n    },\n    attrs: {\n      id: \"companyName\",\n      type: \"text\",\n      name: \"companyName\",\n      placeholder: _vm.$t(\"common.company_name_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.companyName\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"companyName\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"companyName\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-6\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"companyTagline\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.company_info.company_tagline\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.companyTagline,\n      expression: \"form.companyTagline\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"companyTagline\")\n    },\n    attrs: {\n      id: \"companyTagline\",\n      type: \"text\",\n      name: \"companyTagline\",\n      placeholder: _vm.$t(\"setup.general_settings.index.company_info.company_tagline_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.companyTagline\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"companyTagline\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"companyTagline\"\n    }\n  })], 1)]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"row\"\n  }, [_c(\"div\", {\n    staticClass: \"form-group col-md-6\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"emailAddress\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.company_info.email_address\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.emailAddress,\n      expression: \"form.emailAddress\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"emailAddress\")\n    },\n    attrs: {\n      id: \"emailAddress\",\n      type: \"email\",\n      name: \"emailAddress\",\n      placeholder: _vm.$t(\"setup.general_settings.index.company_info.email_address_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.emailAddress\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"emailAddress\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"emailAddress\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-6\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"phoneNumber\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.company_info.phone_number\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.phoneNumber,\n      expression: \"form.phoneNumber\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"phoneNumber\")\n    },\n    attrs: {\n      id: \"phoneNumber\",\n      type: \"text\",\n      name: \"phoneNumber\",\n      placeholder: _vm.$t(\"setup.general_settings.index.company_info.phone_number_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.phoneNumber\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"phoneNumber\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"name\"\n    }\n  })], 1)]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"address\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.address\")))]), _vm._v(\" \"), _c(\"textarea\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.address,\n      expression: \"form.address\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"address\")\n    },\n    attrs: {\n      id: \"address\",\n      placeholder: _vm.$t(\"common.address_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.address\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"address\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"address\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"br\"), _vm._v(\" \"), _c(\"strong\", [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.code_prefixes.prefix_title\")))]), _vm._v(\" \"), _c(\"hr\"), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"row\"\n  }, [_c(\"div\", {\n    staticClass: \"form-group col-md-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"clientPrefix\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.code_prefixes.client_prefix\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.clientPrefix,\n      expression: \"form.clientPrefix\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"clientPrefix\")\n    },\n    attrs: {\n      id: \"clientPrefix\",\n      type: \"text\",\n      name: \"clientPrefix\",\n      placeholder: _vm.$t(\"setup.general_settings.index.code_prefixes.client_prefix_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.clientPrefix\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"clientPrefix\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"clientPrefix\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"supplierPrefix\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.code_prefixes.supplier_prefix\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.supplierPrefix,\n      expression: \"form.supplierPrefix\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"supplierPrefix\")\n    },\n    attrs: {\n      id: \"supplierPrefix\",\n      type: \"text\",\n      name: \"supplierPrefix\",\n      placeholder: _vm.$t(\"setup.general_settings.index.code_prefixes.supplier_prefix_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.supplierPrefix\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"supplierPrefix\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"supplierPrefix\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"employeePrefix\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.code_prefixes.employee_prefix\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.employeePrefix,\n      expression: \"form.employeePrefix\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"employeePrefix\")\n    },\n    attrs: {\n      id: \"employeePrefix\",\n      type: \"text\",\n      name: \"employeePrefix\",\n      placeholder: _vm.$t(\"setup.general_settings.index.code_prefixes.employee_prefix_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.employeePrefix\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"employeePrefix\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"employeePrefix\"\n    }\n  })], 1)]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"row\"\n  }, [_c(\"div\", {\n    staticClass: \"form-group col-md-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"proCatPrefix\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.code_prefixes.product_category_prefix\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.proCatPrefix,\n      expression: \"form.proCatPrefix\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"proCatPrefix\")\n    },\n    attrs: {\n      id: \"proCatPrefix\",\n      type: \"text\",\n      name: \"proCatPrefix\",\n      placeholder: _vm.$t(\"setup.general_settings.index.code_prefixes.product_category_prefix_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.proCatPrefix\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"proCatPrefix\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"proCatPrefix\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"proSubCatPrefix\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.code_prefixes.product_sub_category_prefix\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.proSubCatPrefix,\n      expression: \"form.proSubCatPrefix\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"proSubCatPrefix\")\n    },\n    attrs: {\n      id: \"proSubCatPrefix\",\n      type: \"text\",\n      name: \"proSubCatPrefix\",\n      placeholder: _vm.$t(\"setup.general_settings.index.code_prefixes.product_sub_category_prefix_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.proSubCatPrefix\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"proSubCatPrefix\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"proSubCatPrefix\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"productPrefix\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.code_prefixes.product_prefix\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.productPrefix,\n      expression: \"form.productPrefix\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"productPrefix\")\n    },\n    attrs: {\n      id: \"productPrefix\",\n      type: \"text\",\n      name: \"productPrefix\",\n      placeholder: _vm.$t(\"setup.general_settings.index.code_prefixes.product_prefix_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.productPrefix\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"productPrefix\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"productPrefix\"\n    }\n  })], 1)]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"row\"\n  }, [_c(\"div\", {\n    staticClass: \"form-group col-lg-6 col-xl-3\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"expCatPrefix\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.code_prefixes.expense_category_prefix\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.expCatPrefix,\n      expression: \"form.expCatPrefix\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"expCatPrefix\")\n    },\n    attrs: {\n      id: \"expCatPrefix\",\n      type: \"text\",\n      name: \"expCatPrefix\",\n      placeholder: _vm.$t(\"setup.general_settings.index.code_prefixes.expense_category_prefix_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.expCatPrefix\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"expCatPrefix\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"expCatPrefix\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-lg-6 col-xl-3\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"expSubCatPrefix\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.code_prefixes.expense_sub_category_prefix\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.expSubCatPrefix,\n      expression: \"form.expSubCatPrefix\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"expSubCatPrefix\")\n    },\n    attrs: {\n      id: \"expSubCatPrefix\",\n      type: \"text\",\n      name: \"expSubCatPrefix\",\n      placeholder: _vm.$t(\"setup.general_settings.index.code_prefixes.expense_sub_category_prefix_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.expSubCatPrefix\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"expSubCatPrefix\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"expSubCatPrefix\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-lg-6 col-xl-3\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"purchasePrefix\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.code_prefixes.purchase_prefix\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.purchasePrefix,\n      expression: \"form.purchasePrefix\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"purchasePrefix\")\n    },\n    attrs: {\n      id: \"purchasePrefix\",\n      type: \"text\",\n      name: \"purchasePrefix\",\n      placeholder: _vm.$t(\"setup.general_settings.index.code_prefixes.purchase_prefix_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.purchasePrefix\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"purchasePrefix\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"purchasePrefix\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-lg-6 col-xl-3\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"purchaseReturnPrefix\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.code_prefixes.purchase_return_prefix\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.purchaseReturnPrefix,\n      expression: \"form.purchaseReturnPrefix\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"purchaseReturnPrefix\")\n    },\n    attrs: {\n      id: \"purchaseReturnPrefix\",\n      type: \"text\",\n      name: \"purchaseReturnPrefix\",\n      placeholder: _vm.$t(\"setup.general_settings.index.code_prefixes.purchase_return_prefix_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.purchaseReturnPrefix\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"purchaseReturnPrefix\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"purchaseReturnPrefix\"\n    }\n  })], 1)]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"row\"\n  }, [_c(\"div\", {\n    staticClass: \"form-group col-lg-6 col-xl-3\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"quotationPrefix\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.code_prefixes.quotation_prefix\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.quotationPrefix,\n      expression: \"form.quotationPrefix\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"quotationPrefix\")\n    },\n    attrs: {\n      id: \"quotationPrefix\",\n      type: \"text\",\n      name: \"quotationPrefix\",\n      placeholder: _vm.$t(\"setup.general_settings.index.code_prefixes.quotation_prefix_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.quotationPrefix\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"quotationPrefix\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"quotationPrefix\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-lg-6 col-xl-3\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"invoicePrefix\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.code_prefixes.invoice_prefix\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.invoicePrefix,\n      expression: \"form.invoicePrefix\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"invoicePrefix\")\n    },\n    attrs: {\n      id: \"invoicePrefix\",\n      type: \"text\",\n      name: \"invoicePrefix\",\n      placeholder: _vm.$t(\"setup.general_settings.index.code_prefixes.invoice_prefix_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.invoicePrefix\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"invoicePrefix\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"invoicePrefix\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-lg-6 col-xl-3\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"invoiceReturnPrefix\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.code_prefixes.invoice_return_prefix\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.invoiceReturnPrefix,\n      expression: \"form.invoiceReturnPrefix\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"invoiceReturnPrefix\")\n    },\n    attrs: {\n      id: \"invoiceReturnPrefix\",\n      type: \"text\",\n      name: \"invoiceReturnPrefix\",\n      placeholder: _vm.$t(\"setup.general_settings.index.code_prefixes.invoice_return_prefix_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.invoiceReturnPrefix\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"invoiceReturnPrefix\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"invoiceReturnPrefix\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-lg-6 col-xl-3\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"adjustmentPrefix\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.code_prefixes.invoice_adjustment_prefix\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.adjustmentPrefix,\n      expression: \"form.adjustmentPrefix\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"adjustmentPrefix\")\n    },\n    attrs: {\n      id: \"adjustmentPrefix\",\n      type: \"text\",\n      name: \"adjustmentPrefix\",\n      placeholder: _vm.$t(\"setup.general_settings.index.code_prefixes.invoice_adjustment_prefix_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.adjustmentPrefix\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"adjustmentPrefix\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"adjustmentPrefix\"\n    }\n  })], 1)]), _vm._v(\" \"), _c(\"br\"), _vm._v(\" \"), _c(\"strong\", [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.default_elements.default_elements_title\")))]), _vm._v(\" \"), _c(\"hr\"), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"row\"\n  }, [_vm.items ? _c(\"div\", {\n    staticClass: \"form-group col-md-6\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"currency\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.default_elements.default_currency\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"v-select\", {\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"currency\")\n    },\n    attrs: {\n      options: _vm.items,\n      label: \"label\",\n      name: \"currency\",\n      placeholder: _vm.$t(\"setup.general_settings.index.default_elements.select_a_currency\")\n    },\n    model: {\n      value: _vm.form.currency,\n      callback: function callback($$v) {\n        _vm.$set(_vm.form, \"currency\", $$v);\n      },\n      expression: \"form.currency\"\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"currency\"\n    }\n  })], 1) : _vm._e(), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-6\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"language\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.default_elements.default_language\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"select\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.language,\n      expression: \"form.language\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"language\")\n    },\n    attrs: {\n      name: \"\"\n    },\n    on: {\n      change: function change($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {\n          return o.selected;\n        }).map(function (o) {\n          var val = \"_value\" in o ? o._value : o.value;\n          return val;\n        });\n        _vm.$set(_vm.form, \"language\", $event.target.multiple ? $$selectedVal : $$selectedVal[0]);\n      }\n    }\n  }, [_c(\"option\", {\n    attrs: {\n      value: \"en\"\n    }\n  }, [_vm._v(\"\\n                    \" + _vm._s(_vm.$t(\"setup.general_settings.index.default_elements.english_en\")) + \"\\n                  \")]), _vm._v(\" \"), _c(\"option\", {\n    attrs: {\n      value: \"hi\"\n    }\n  }, [_vm._v(\"\\n                    \" + _vm._s(_vm.$t(\"setup.general_settings.index.default_elements.hindi_hi\")) + \"\\n                  \")])]), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"language\"\n    }\n  })], 1)]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"row\"\n  }, [this.allClients ? _c(\"div\", {\n    staticClass: \"form-group col-md-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"client\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.default_elements.default_client\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"v-select\", {\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"defaultClient\")\n    },\n    attrs: {\n      options: this.allClients,\n      label: \"name\",\n      name: \"client\",\n      placeholder: _vm.$t(\"setup.general_settings.index.default_elements.select_a_client\")\n    },\n    model: {\n      value: _vm.form.defaultClient,\n      callback: function callback($$v) {\n        _vm.$set(_vm.form, \"defaultClient\", $$v);\n      },\n      expression: \"form.defaultClient\"\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"defaultClient\"\n    }\n  })], 1) : _vm._e(), _vm._v(\" \"), this.allAccounts ? _c(\"div\", {\n    staticClass: \"form-group col-md-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"client\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.default_elements.default_account\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"v-select\", {\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"defaultAccount\")\n    },\n    attrs: {\n      options: this.allAccounts,\n      label: \"bankName\",\n      name: \"account\",\n      placeholder: _vm.$t(\"setup.general_settings.index.default_elements.select_a_account\")\n    },\n    model: {\n      value: _vm.form.defaultAccount,\n      callback: function callback($$v) {\n        _vm.$set(_vm.form, \"defaultAccount\", $$v);\n      },\n      expression: \"form.defaultAccount\"\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"defaultAccount\"\n    }\n  })], 1) : _vm._e(), _vm._v(\" \"), this.allVatRates ? _c(\"div\", {\n    staticClass: \"form-group col-md-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"vatRate\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.default_elements.default_vat_rate\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"v-select\", {\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"defaultVatRate\")\n    },\n    attrs: {\n      options: this.allVatRates,\n      label: \"name\",\n      name: \"vatRate\",\n      placeholder: _vm.$t(\"setup.general_settings.index.default_elements.select_a_vat_rate\")\n    },\n    model: {\n      value: _vm.form.defaultVatRate,\n      callback: function callback($$v) {\n        _vm.$set(_vm.form, \"defaultVatRate\", $$v);\n      },\n      expression: \"form.defaultVatRate\"\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"defaultVatRate\"\n    }\n  })], 1) : _vm._e()]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"row\"\n  }, [_c(\"div\", {\n    staticClass: \"form-group col-md-6\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"logo\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.logo.white_logo\")))]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"custom-file\"\n  }, [_c(\"input\", {\n    staticClass: \"custom-file-input\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"logo\")\n    },\n    attrs: {\n      id: \"logo\",\n      type: \"file\",\n      name: \"logo\"\n    },\n    on: {\n      change: _vm.onLogoChange\n    }\n  }), _vm._v(\" \"), _c(\"label\", {\n    staticClass: \"custom-file-label\",\n    attrs: {\n      \"for\": \"logo\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.choose_file\")))])]), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"logo\"\n    }\n  }), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"bg-light mt-4 w-25\"\n  }, [_vm.logo ? _c(\"img\", {\n    staticClass: \"img-fluid\",\n    attrs: {\n      src: _vm.logo,\n      alt: \"Logo\"\n    }\n  }) : _vm._e()])], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-6\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"blackLogo\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.logo.black_logo\")))]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"custom-file\"\n  }, [_c(\"input\", {\n    staticClass: \"custom-file-input\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"blackLogo\")\n    },\n    attrs: {\n      id: \"blackLogo\",\n      type: \"file\",\n      name: \"blackLogo\"\n    },\n    on: {\n      change: _vm.onBlackLogoChange\n    }\n  }), _vm._v(\" \"), _c(\"label\", {\n    staticClass: \"custom-file-label\",\n    attrs: {\n      \"for\": \"blackLogo\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.choose_file\")))])]), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"blackLogo\"\n    }\n  }), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"bg-light mt-4 w-25\"\n  }, [_vm.blackLogo ? _c(\"img\", {\n    staticClass: \"img-fluid\",\n    attrs: {\n      src: _vm.blackLogo,\n      alt: \"Black Logo\"\n    }\n  }) : _vm._e()])], 1)]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"row\"\n  }, [_c(\"div\", {\n    staticClass: \"form-group col-md-6\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"smallLogo\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.logo.small_logo\")))]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"custom-file\"\n  }, [_c(\"input\", {\n    staticClass: \"custom-file-input\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"smallLogo\")\n    },\n    attrs: {\n      id: \"smallLogo\",\n      type: \"file\",\n      name: \"smallLogo\"\n    },\n    on: {\n      change: _vm.onSmallLogoChange\n    }\n  }), _vm._v(\" \"), _c(\"label\", {\n    staticClass: \"custom-file-label\",\n    attrs: {\n      \"for\": \"smallLogo\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.choose_file\")))])]), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"smallLogo\"\n    }\n  }), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"bg-light mt-4 w-25\"\n  }, [_vm.smallLogo ? _c(\"img\", {\n    staticClass: \"img-fluid\",\n    attrs: {\n      src: _vm.smallLogo,\n      alt: \"Small Logo\"\n    }\n  }) : _vm._e()])], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-6\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"favicon\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.logo.favicon\")))]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"custom-file\"\n  }, [_c(\"input\", {\n    staticClass: \"custom-file-input\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"favicon\")\n    },\n    attrs: {\n      id: \"favicon\",\n      type: \"file\",\n      name: \"favicon\"\n    },\n    on: {\n      change: _vm.onFaviconChange\n    }\n  }), _vm._v(\" \"), _c(\"label\", {\n    staticClass: \"custom-file-label\",\n    attrs: {\n      \"for\": \"favicon\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.choose_file\")))])]), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"favicon\"\n    }\n  }), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"bg-light mt-4 w-25\"\n  }, [_vm.favicon ? _c(\"img\", {\n    staticClass: \"img-fluid\",\n    attrs: {\n      src: _vm.favicon,\n      alt: \"Favicon\"\n    }\n  }) : _vm._e()])], 1)]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"row\"\n  }, [_c(\"div\", {\n    staticClass: \"form-group col-md-12\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"copyrightText\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"setup.general_settings.index.default_elements.copyright_text\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.copyrightText,\n      expression: \"form.copyrightText\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"copyrightText\")\n    },\n    attrs: {\n      id: \"copyrightText\",\n      type: \"text\",\n      name: \"copyrightText\",\n      placeholder: \"$t('setup.general_settings.index.default_elements.copyright_text_placeholder')\"\n    },\n    domProps: {\n      value: _vm.form.copyrightText\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"copyrightText\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"copyrightText\"\n    }\n  })], 1)])]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"card-footer\"\n  }, [_c(\"v-button\", {\n    staticClass: \"btn btn-primary\",\n    attrs: {\n      loading: _vm.form.busy\n    }\n  }, [_c(\"i\", {\n    staticClass: \"fas fa-edit\"\n  }), _vm._v(\" \" + _vm._s(_vm.$t(\"common.save_changes\")) + \"\\n            \")]), _vm._v(\" \"), _c(\"button\", {\n    staticClass: \"btn btn-secondary float-right\",\n    attrs: {\n      type: \"reset\"\n    },\n    on: {\n      click: function click($event) {\n        return _vm.form.reset();\n      }\n    }\n  }, [_c(\"i\", {\n    staticClass: \"fas fa-power-off\"\n  }), _vm._v(\" \" + _vm._s(_vm.$t(\"common.reset\")) + \"\\n            \")])], 1)])])])])], 1);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/setup/general.vue?vue&type=template&id=7cfa81bd&scoped=true&\n");

/***/ }),

/***/ "./resources/js/pages/setup/general.vue":
/*!**********************************************!*\
  !*** ./resources/js/pages/setup/general.vue ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _general_vue_vue_type_template_id_7cfa81bd_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./general.vue?vue&type=template&id=7cfa81bd&scoped=true& */ \"./resources/js/pages/setup/general.vue?vue&type=template&id=7cfa81bd&scoped=true&\");\n/* harmony import */ var _general_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./general.vue?vue&type=script&lang=js& */ \"./resources/js/pages/setup/general.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _general_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _general_vue_vue_type_template_id_7cfa81bd_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _general_vue_vue_type_template_id_7cfa81bd_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  \"7cfa81bd\",\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"resources/js/pages/setup/general.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvcGFnZXMvc2V0dXAvZ2VuZXJhbC52dWU/NjEwOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFrRztBQUN2QztBQUNMOzs7QUFHdEQ7QUFDZ0c7QUFDaEcsZ0JBQWdCLDJHQUFVO0FBQzFCLEVBQUUsNkVBQU07QUFDUixFQUFFLDhGQUFNO0FBQ1IsRUFBRSx1R0FBZTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLElBQUksS0FBVSxFQUFFLFlBaUJmO0FBQ0Q7QUFDZSxnRiIsImZpbGUiOiIuL3Jlc291cmNlcy9qcy9wYWdlcy9zZXR1cC9nZW5lcmFsLnZ1ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vZ2VuZXJhbC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9N2NmYTgxYmQmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vZ2VuZXJhbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL2dlbmVyYWwudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCI3Y2ZhODFiZFwiLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkY6XFxcXHhhbXBwXFxcXGh0ZG9jc1xcXFxhc2lmXFxcXGFjY291bnRpbmctcG9zLXNvZnR3YXJlXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzdjZmE4MWJkJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzdjZmE4MWJkJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzdjZmE4MWJkJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9nZW5lcmFsLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03Y2ZhODFiZCZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc3Y2ZhODFiZCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicmVzb3VyY2VzL2pzL3BhZ2VzL3NldHVwL2dlbmVyYWwudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/pages/setup/general.vue\n");

/***/ }),

/***/ "./resources/js/pages/setup/general.vue?vue&type=script&lang=js&":
/*!***********************************************************************!*\
  !*** ./resources/js/pages/setup/general.vue?vue&type=script&lang=js& ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_general_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--4-0!../../../../node_modules/vue-loader/lib??vue-loader-options!./general.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/setup/general.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_general_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvcGFnZXMvc2V0dXAvZ2VuZXJhbC52dWU/ZTNiOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUEsd0NBQTZMLENBQWdCLG1QQUFHLEVBQUMiLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvcGFnZXMvc2V0dXAvZ2VuZXJhbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS00LTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9nZW5lcmFsLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS00LTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9nZW5lcmFsLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/pages/setup/general.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./resources/js/pages/setup/general.vue?vue&type=template&id=7cfa81bd&scoped=true&":
/*!*****************************************************************************************!*\
  !*** ./resources/js/pages/setup/general.vue?vue&type=template&id=7cfa81bd&scoped=true& ***!
  \*****************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_6_node_modules_vue_loader_lib_index_js_vue_loader_options_general_vue_vue_type_template_id_7cfa81bd_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--4-0!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!../../../../node_modules/vue-loader/lib??vue-loader-options!./general.vue?vue&type=template&id=7cfa81bd&scoped=true& */ \"./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/setup/general.vue?vue&type=template&id=7cfa81bd&scoped=true&\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_6_node_modules_vue_loader_lib_index_js_vue_loader_options_general_vue_vue_type_template_id_7cfa81bd_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_6_node_modules_vue_loader_lib_index_js_vue_loader_options_general_vue_vue_type_template_id_7cfa81bd_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvcGFnZXMvc2V0dXAvZ2VuZXJhbC52dWU/NzMxMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvcGFnZXMvc2V0dXAvZ2VuZXJhbC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9N2NmYTgxYmQmc2NvcGVkPXRydWUmLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNC0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz9yZWYtLTYhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9nZW5lcmFsLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03Y2ZhODFiZCZzY29wZWQ9dHJ1ZSZcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/pages/setup/general.vue?vue&type=template&id=7cfa81bd&scoped=true&\n");

/***/ })

}]);