(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[122],{

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/products/edit.vue?vue&type=script&lang=js&":
/*!*******************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/pages/products/edit.vue?vue&type=script&lang=js& ***!
  \*******************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var vuex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vuex */ \"./node_modules/vuex/dist/vuex.esm.js\");\n/* harmony import */ var vform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vform */ \"./node_modules/vform/dist/vform.common.js\");\n/* harmony import */ var vform__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(vform__WEBPACK_IMPORTED_MODULE_1__);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  middleware: ['auth', 'check-permissions'],\n  metaInfo: function metaInfo() {\n    return {\n      title: this.$t('products.list.edit.page_title')\n    };\n  },\n  data: function data() {\n    return {\n      breadcrumbsCurrent: 'products.list.edit.breadcrumbs_current',\n      breadcrumbs: [{\n        name: 'products.list.edit.breadcrumbs_first',\n        url: 'home'\n      }, {\n        name: 'products.list.edit.breadcrumbs_second',\n        url: 'products.index'\n      }, {\n        name: 'products.list.edit.breadcrumbs_active',\n        url: ''\n      }],\n      url: null,\n      form: new vform__WEBPACK_IMPORTED_MODULE_1___default.a({\n        itemName: '',\n        itemCode: '',\n        itemModel: '',\n        barcodeSymbology: 'CODE128',\n        subCategory: '',\n        brand: '',\n        itemUnit: '',\n        productTax: '',\n        taxType: 'Exclusive',\n        regularPrice: '',\n        discount: '',\n        sellingPrice: '',\n        note: '',\n        alertQuantity: 1,\n        status: 1,\n        image: ''\n      }),\n      options: [],\n      prefix: '',\n      units: [],\n      brands: [],\n      taxes: []\n    };\n  },\n  computed: _objectSpread({}, Object(vuex__WEBPACK_IMPORTED_MODULE_0__[\"mapGetters\"])('operations', ['items', 'appInfo'])),\n  created: function created() {\n    this.getSubCatgories();\n    this.getUnits();\n    this.getProduct();\n    this.getBrands();\n    this.getTaxes();\n    this.prefix = this.appInfo.productPrefix;\n  },\n  methods: {\n    // get all product categories\n    getSubCatgories: function getSubCatgories() {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.$store.dispatch('operations/allData', {\n                path: '/api/all-product-sub-categories'\n              });\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    // get all brands\n    getBrands: function getBrands() {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _yield$_this2$form$ge, data;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _this2.form.get(window.location.origin + '/api/all-brands');\n            case 2:\n              _yield$_this2$form$ge = _context2.sent;\n              data = _yield$_this2$form$ge.data;\n              _this2.brands = data.data;\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    },\n    // get all units\n    getUnits: function getUnits() {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _yield$_this3$form$ge, data;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _this3.form.get(window.location.origin + '/api/all-units');\n            case 2:\n              _yield$_this3$form$ge = _context3.sent;\n              data = _yield$_this3$form$ge.data;\n              _this3.units = data.data;\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }))();\n    },\n    // get all taxes\n    getTaxes: function getTaxes() {\n      var _this4 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _yield$_this4$form$ge, data;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _this4.form.get(window.location.origin + '/api/all-vat-rates');\n            case 2:\n              _yield$_this4$form$ge = _context4.sent;\n              data = _yield$_this4$form$ge.data;\n              _this4.taxes = data.data;\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }))();\n    },\n    // get product\n    getProduct: function getProduct() {\n      var _this5 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var _yield$_this5$form$ge, data;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _this5.form.get(window.location.origin + '/api/products/' + _this5.$route.params.slug);\n            case 2:\n              _yield$_this5$form$ge = _context5.sent;\n              data = _yield$_this5$form$ge.data;\n              _this5.form.itemName = data.data.name;\n              _this5.form.itemCode = data.data.code;\n              _this5.form.itemModel = data.data.itemModel;\n              _this5.form.barcodeSymbology = data.data.symbology;\n              _this5.form.brand = data.data.itemBrand;\n              _this5.form.productTax = data.data.itemTax;\n              _this5.form.taxType = data.data.taxType;\n              _this5.form.subCategory = data.data.subCategory;\n              _this5.form.itemUnit = data.data.itemUnit;\n              _this5.form.regularPrice = data.data.regularPrice;\n              _this5.form.sellingPrice = data.data.sellingPrice;\n              _this5.form.discount = data.data.discount;\n              _this5.form.note = data.data.note;\n              _this5.form.status = data.data.status;\n              _this5.form.alertQuantity = data.data.alertQty;\n              _this5.url = data.data.image;\n            case 20:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }))();\n    },\n    // calculate selling price\n    calculatePrice: function calculatePrice() {\n      if (this.form.sellingPrice && this.form.productTax && this.form.taxType) {\n        var discount = 0;\n        if (this.form.discount && this.form.discount > 0) {\n          discount = this.form.discount / 100 * this.form.regularPrice;\n        }\n        var currentPrice = this.form.regularPrice - discount;\n        var taxAmount = 0;\n        var totalTax = 0;\n        if (this.form.productTax.rate > 0) {\n          taxAmount = this.form.productTax.rate / 100;\n        }\n        if (this.form.taxType == 'Exclusive') {\n          totalTax = currentPrice * taxAmount;\n        } else {\n          totalTax = currentPrice - currentPrice / (1 + taxAmount);\n        }\n        if (this.form.taxType == 'Exclusive') {\n          this.form.sellingPrice = this.form.regularPrice - discount + totalTax;\n        } else {\n          this.form.sellingPrice = (this.form.regularPrice - discount) / (1 + taxAmount) + totalTax;\n        }\n        return;\n      }\n      return this.form.sellingPrice = this.form.regularPrice;\n    },\n    // vue file upload\n    onFileChange: function onFileChange(e) {\n      var _this6 = this;\n      var file = e.target.files[0];\n      var reader = new FileReader();\n      if (file.size < 2111775 && (file.type === 'image/jpeg' || file.type === 'image/png' || file.type === 'image/gif')) {\n        reader.onloadend = function (file) {\n          _this6.form.image = reader.result;\n        };\n        reader.readAsDataURL(file);\n        this.url = URL.createObjectURL(file);\n      } else {\n        Swal.fire('error!', 'Please select a valid thumbnail with size less than 2 MB', 'error');\n      }\n    },\n    // update product\n    updateProduct: function updateProduct() {\n      var _this7 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _this7.form.patch(window.location.origin + '/api/products/' + _this7.$route.params.slug).then(function (response) {\n                toast.fire({\n                  type: 'success',\n                  title: 'Product updated successfully 👍'\n                });\n                _this7.$router.push({\n                  name: 'products.index'\n                });\n              })[\"catch\"](function () {\n                toast.fire({\n                  type: 'error',\n                  title: 'Opps...something is wrong 😔'\n                });\n              });\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6);\n      }))();\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/products/edit.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/products/edit.vue?vue&type=template&id=0f50a2bc&scoped=true&":
/*!*****************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/pages/products/edit.vue?vue&type=template&id=0f50a2bc&scoped=true& ***!
  \*****************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"div\", [_c(\"breadcrumbs\", {\n    attrs: {\n      items: _vm.breadcrumbs,\n      current: _vm.breadcrumbsCurrent\n    }\n  }), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"row\"\n  }, [_c(\"div\", {\n    staticClass: \"col-lg-12\"\n  }, [_c(\"div\", {\n    staticClass: \"card\"\n  }, [_c(\"div\", {\n    staticClass: \"card-header\"\n  }, [_vm.form.itemName ? _c(\"h3\", {\n    staticClass: \"card-title\"\n  }, [_vm._v(\"\\n            \" + _vm._s(_vm.$t(\"products.list.edit.form_title\")) + \"\\n          \")]) : _vm._e(), _vm._v(\" \"), _c(\"router-link\", {\n    staticClass: \"btn btn-dark float-right\",\n    attrs: {\n      to: {\n        name: \"products.index\"\n      }\n    }\n  }, [_c(\"i\", {\n    staticClass: \"fas fa-long-arrow-alt-left\"\n  }), _vm._v(\" \" + _vm._s(_vm.$t(\"common.back\")) + \"\\n          \")])], 1), _vm._v(\" \"), _c(\"form\", {\n    attrs: {\n      role: \"form\"\n    },\n    on: {\n      submit: function submit($event) {\n        $event.preventDefault();\n        return _vm.updateProduct.apply(null, arguments);\n      },\n      keydown: function keydown($event) {\n        return _vm.form.onKeydown($event);\n      }\n    }\n  }, [_c(\"div\", {\n    staticClass: \"card-body\"\n  }, [_c(\"div\", {\n    staticClass: \"row\"\n  }, [_c(\"div\", {\n    staticClass: \"form-group col-md-6 col-xl-6\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"itemName\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.item_name\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.itemName,\n      expression: \"form.itemName\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"itemName\")\n    },\n    attrs: {\n      id: \"itemName\",\n      type: \"text\",\n      name: \"itemName\",\n      placeholder: _vm.$t(\"common.item_name_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.itemName\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"itemName\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"itemName\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-6 col-xl-3\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"itemModel\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.item_model\")))]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.itemModel,\n      expression: \"form.itemModel\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"itemModel\")\n    },\n    attrs: {\n      id: \"itemModel\",\n      type: \"text\",\n      name: \"itemModel\",\n      placeholder: _vm.$t(\"common.item_model_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.itemModel\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"itemModel\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"itemModel\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-6 col-xl-3\"\n  }, [_c(\"div\", {\n    staticClass: \"input-group\"\n  }, [_c(\"label\", {\n    staticClass: \"col-md-12\",\n    attrs: {\n      \"for\": \"itemCode\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.item_code\")) + \"\\n                    \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"input-group-prepend\"\n  }, [_vm.prefix ? _c(\"span\", {\n    staticClass: \"input-group-text\",\n    attrs: {\n      id: \"basic-addon1\"\n    }\n  }, [_vm._v(_vm._s(_vm.prefix))]) : _vm._e()]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.itemCode,\n      expression: \"form.itemCode\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"itemCode\")\n    },\n    attrs: {\n      type: \"text\",\n      name: \"itemCode\",\n      placeholder: _vm.$t(\"common.item_code_placeholder\"),\n      \"aria-label\": \"itemCode\",\n      \"aria-describedby\": \"basic-addon1\"\n    },\n    domProps: {\n      value: _vm.form.itemCode\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"itemCode\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"itemCode\"\n    }\n  })], 1)]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-6 col-xl-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"barcodeSymbology\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"products.list.common.barcode_symbology\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"select\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.barcodeSymbology,\n      expression: \"form.barcodeSymbology\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"barcodeSymbology\")\n    },\n    attrs: {\n      id: \"barcodeSymbology\"\n    },\n    on: {\n      change: function change($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {\n          return o.selected;\n        }).map(function (o) {\n          var val = \"_value\" in o ? o._value : o.value;\n          return val;\n        });\n        _vm.$set(_vm.form, \"barcodeSymbology\", $event.target.multiple ? $$selectedVal : $$selectedVal[0]);\n      }\n    }\n  }, [_c(\"option\", {\n    attrs: {\n      value: \"CODE128\"\n    }\n  }, [_vm._v(\"CODE128\")]), _vm._v(\" \"), _c(\"option\", {\n    attrs: {\n      value: \"CODE39\"\n    }\n  }, [_vm._v(\"CODE39\")]), _vm._v(\" \"), _c(\"option\", {\n    attrs: {\n      value: \"EAN8\"\n    }\n  }, [_vm._v(\"EAN8\")]), _vm._v(\" \"), _c(\"option\", {\n    attrs: {\n      value: \"EAN13\"\n    }\n  }, [_vm._v(\"EAN13\")]), _vm._v(\" \"), _c(\"option\", {\n    attrs: {\n      value: \"UPC\"\n    }\n  }, [_vm._v(\"UPC\")])]), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"barcodeSymbology\"\n    }\n  })], 1), _vm._v(\" \"), _vm.items ? _c(\"div\", {\n    staticClass: \"form-group col-md-6 col-xl-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"subCategory\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.sub_category\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"v-select\", {\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"subCategory\")\n    },\n    attrs: {\n      options: _vm.items,\n      label: \"name\",\n      name: \"subCategory\",\n      placeholder: _vm.$t(\"common.category_name_placeholder\")\n    },\n    model: {\n      value: _vm.form.subCategory,\n      callback: function callback($$v) {\n        _vm.$set(_vm.form, \"subCategory\", $$v);\n      },\n      expression: \"form.subCategory\"\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"subCategory\"\n    }\n  })], 1) : _vm._e(), _vm._v(\" \"), _vm.brands ? _c(\"div\", {\n    staticClass: \"form-group col-md-6 col-xl-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"brand\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.brand\")))]), _vm._v(\" \"), _c(\"v-select\", {\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"brand\")\n    },\n    attrs: {\n      options: _vm.brands,\n      label: \"name\",\n      name: \"brand\",\n      placeholder: _vm.$t(\"common.brand_placeholder\")\n    },\n    model: {\n      value: _vm.form.brand,\n      callback: function callback($$v) {\n        _vm.$set(_vm.form, \"brand\", $$v);\n      },\n      expression: \"form.brand\"\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"brand\"\n    }\n  })], 1) : _vm._e(), _vm._v(\" \"), _vm.units ? _c(\"div\", {\n    staticClass: \"form-group col-md-6 col-xl-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"itemUnit\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.unit\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"v-select\", {\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"itemUnit\")\n    },\n    attrs: {\n      options: _vm.units,\n      label: \"name\",\n      name: \"itemUnit\",\n      placeholder: _vm.$t(\"common.unit_placeholder\")\n    },\n    model: {\n      value: _vm.form.itemUnit,\n      callback: function callback($$v) {\n        _vm.$set(_vm.form, \"itemUnit\", $$v);\n      },\n      expression: \"form.itemUnit\"\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"itemUnit\"\n    }\n  })], 1) : _vm._e(), _vm._v(\" \"), _vm.taxes ? _c(\"div\", {\n    staticClass: \"form-group col-md-6 col-xl-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"productTax\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"products.list.common.product_tax\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"v-select\", {\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"productTax\")\n    },\n    attrs: {\n      options: _vm.taxes,\n      label: \"name\",\n      name: \"productTax\",\n      placeholder: _vm.$t(\"products.list.common.tax_placeholder\")\n    },\n    on: {\n      input: _vm.calculatePrice\n    },\n    model: {\n      value: _vm.form.productTax,\n      callback: function callback($$v) {\n        _vm.$set(_vm.form, \"productTax\", $$v);\n      },\n      expression: \"form.productTax\"\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"productTax\"\n    }\n  })], 1) : _vm._e(), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-6 col-xl-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"taxType\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"products.list.common.tax_type\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"select\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.taxType,\n      expression: \"form.taxType\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"taxType\")\n    },\n    attrs: {\n      id: \"taxType\"\n    },\n    on: {\n      change: [function ($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {\n          return o.selected;\n        }).map(function (o) {\n          var val = \"_value\" in o ? o._value : o.value;\n          return val;\n        });\n        _vm.$set(_vm.form, \"taxType\", $event.target.multiple ? $$selectedVal : $$selectedVal[0]);\n      }, _vm.calculatePrice]\n    }\n  }, [_c(\"option\", {\n    attrs: {\n      value: \"Exclusive\"\n    }\n  }, [_vm._v(\"\\n                    \" + _vm._s(_vm.$t(\"products.list.common.exclusive\")) + \"\\n                  \")]), _vm._v(\" \"), _c(\"option\", {\n    attrs: {\n      value: \"Inclusive\"\n    }\n  }, [_vm._v(\"\\n                    \" + _vm._s(_vm.$t(\"products.list.common.inclusive\")) + \"\\n                  \")])]), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"taxType\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-6 col-xl-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"regularPrice\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"products.list.common.regular_price\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.regularPrice,\n      expression: \"form.regularPrice\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"regularPrice\")\n    },\n    attrs: {\n      id: \"regularPrice\",\n      type: \"number\",\n      step: \"any\",\n      min: \"0\",\n      name: \"regularPrice\",\n      placeholder: _vm.$t(\"products.list.common.regular_price_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.regularPrice\n    },\n    on: {\n      change: _vm.calculatePrice,\n      keyup: _vm.calculatePrice,\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"regularPrice\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"regularPrice\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-6 col-xl-4\"\n  }, [_c(\"div\", {\n    staticClass: \"input-group\"\n  }, [_c(\"label\", {\n    staticClass: \"col-md-12\",\n    attrs: {\n      \"for\": \"discount\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.discount\")))]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.discount,\n      expression: \"form.discount\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"discount\")\n    },\n    attrs: {\n      type: \"number\",\n      min: \"0\",\n      max: \"100\",\n      name: \"discount\",\n      placeholder: _vm.$t(\"common.discount_placeholder\"),\n      \"aria-label\": \"discount\",\n      \"aria-describedby\": \"basic-addon1\"\n    },\n    domProps: {\n      value: _vm.form.discount\n    },\n    on: {\n      change: _vm.calculatePrice,\n      keyup: _vm.calculatePrice,\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"discount\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _vm._m(0), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"discount\"\n    }\n  })], 1)]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-6 col-xl-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"sellingPrice\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"products.list.common.selling_price\")))]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.sellingPrice,\n      expression: \"form.sellingPrice\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"sellingPrice\")\n    },\n    attrs: {\n      id: \"sellingPrice\",\n      type: \"number\",\n      readonly: \"\",\n      name: \"sellingPrice\",\n      placeholder: _vm.$t(\"products.list.common.selling_price_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.sellingPrice\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"sellingPrice\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"sellingPrice\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-12\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"note\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.note\")))]), _vm._v(\" \"), _c(\"textarea\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.note,\n      expression: \"form.note\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"note\")\n    },\n    attrs: {\n      id: \"note\",\n      type: \"text\",\n      name: \"companyName\",\n      placeholder: _vm.$t(\"common.note_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.note\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"note\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"note\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-6 col-xl-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"alertQuantity\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"products.list.common.alert_quantity\")))]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.alertQuantity,\n      expression: \"form.alertQuantity\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"alertQuantity\")\n    },\n    attrs: {\n      id: \"alertQuantity\",\n      type: \"number\",\n      min: \"0\",\n      max: \"1000\",\n      name: \"alertQuantity\",\n      placeholder: _vm.$t(\"products.list.common.alert_quantity_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.alertQuantity\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"alertQuantity\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"alertQuantity\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-6 col-xl-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"status\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.status\")))]), _vm._v(\" \"), _c(\"select\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.status,\n      expression: \"form.status\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"status\")\n    },\n    attrs: {\n      id: \"status\"\n    },\n    on: {\n      change: function change($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {\n          return o.selected;\n        }).map(function (o) {\n          var val = \"_value\" in o ? o._value : o.value;\n          return val;\n        });\n        _vm.$set(_vm.form, \"status\", $event.target.multiple ? $$selectedVal : $$selectedVal[0]);\n      }\n    }\n  }, [_c(\"option\", {\n    attrs: {\n      value: \"1\"\n    }\n  }, [_vm._v(\"\\n                    \" + _vm._s(_vm.$t(\"common.active\")) + \"\\n                  \")]), _vm._v(\" \"), _c(\"option\", {\n    attrs: {\n      value: \"0\"\n    }\n  }, [_vm._v(\"\\n                    \" + _vm._s(_vm.$t(\"common.in_active\")) + \"\\n                  \")])]), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"status\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"image\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.image\")))]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"custom-file\"\n  }, [_c(\"input\", {\n    staticClass: \"custom-file-input\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"image\")\n    },\n    attrs: {\n      id: \"image\",\n      type: \"file\",\n      name: \"image\"\n    },\n    on: {\n      change: _vm.onFileChange\n    }\n  }), _vm._v(\" \"), _c(\"label\", {\n    staticClass: \"custom-file-label\",\n    attrs: {\n      \"for\": \"image\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.choose_file\")))])]), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"image\"\n    }\n  }), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"bg-light mt-4 w-25\"\n  }, [_vm.url ? _c(\"img\", {\n    staticClass: \"img-fluid\",\n    attrs: {\n      src: _vm.url,\n      alt: _vm.$t(\"common.image_alt\")\n    }\n  }) : _vm._e()])], 1)])]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"card-footer\"\n  }, [_c(\"v-button\", {\n    staticClass: \"btn btn-primary\",\n    attrs: {\n      loading: _vm.form.busy\n    }\n  }, [_c(\"i\", {\n    staticClass: \"fas fa-edit\"\n  }), _vm._v(\" \" + _vm._s(_vm.$t(\"common.save_changes\")) + \"\\n            \")]), _vm._v(\" \"), _c(\"button\", {\n    staticClass: \"btn btn-secondary float-right\",\n    attrs: {\n      type: \"reset\"\n    },\n    on: {\n      click: function click($event) {\n        return _vm.form.reset();\n      }\n    }\n  }, [_c(\"i\", {\n    staticClass: \"fas fa-power-off\"\n  }), _vm._v(\" \" + _vm._s(_vm.$t(\"common.reset\")) + \"\\n            \")])], 1)])])])])], 1);\n};\nvar staticRenderFns = [function () {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"div\", {\n    staticClass: \"input-group-prepend\"\n  }, [_c(\"span\", {\n    staticClass: \"input-group-text\",\n    attrs: {\n      id: \"basic-addon1\"\n    }\n  }, [_vm._v(\"%\")])]);\n}];\nrender._withStripped = true;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/products/edit.vue?vue&type=template&id=0f50a2bc&scoped=true&\n");

/***/ }),

/***/ "./resources/js/pages/products/edit.vue":
/*!**********************************************!*\
  !*** ./resources/js/pages/products/edit.vue ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _edit_vue_vue_type_template_id_0f50a2bc_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./edit.vue?vue&type=template&id=0f50a2bc&scoped=true& */ \"./resources/js/pages/products/edit.vue?vue&type=template&id=0f50a2bc&scoped=true&\");\n/* harmony import */ var _edit_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./edit.vue?vue&type=script&lang=js& */ \"./resources/js/pages/products/edit.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _edit_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _edit_vue_vue_type_template_id_0f50a2bc_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _edit_vue_vue_type_template_id_0f50a2bc_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  \"0f50a2bc\",\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"resources/js/pages/products/edit.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvcGFnZXMvcHJvZHVjdHMvZWRpdC52dWU/OWJjOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUErRjtBQUN2QztBQUNMOzs7QUFHbkQ7QUFDZ0c7QUFDaEcsZ0JBQWdCLDJHQUFVO0FBQzFCLEVBQUUsMEVBQU07QUFDUixFQUFFLDJGQUFNO0FBQ1IsRUFBRSxvR0FBZTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLElBQUksS0FBVSxFQUFFLFlBaUJmO0FBQ0Q7QUFDZSxnRiIsImZpbGUiOiIuL3Jlc291cmNlcy9qcy9wYWdlcy9wcm9kdWN0cy9lZGl0LnZ1ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vZWRpdC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MGY1MGEyYmMmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vZWRpdC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL2VkaXQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCIwZjUwYTJiY1wiLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkY6XFxcXHhhbXBwXFxcXGh0ZG9jc1xcXFxhc2lmXFxcXGFjY291bnRpbmctcG9zLXNvZnR3YXJlXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzBmNTBhMmJjJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzBmNTBhMmJjJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzBmNTBhMmJjJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9lZGl0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wZjUwYTJiYyZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCcwZjUwYTJiYycsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicmVzb3VyY2VzL2pzL3BhZ2VzL3Byb2R1Y3RzL2VkaXQudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/pages/products/edit.vue\n");

/***/ }),

/***/ "./resources/js/pages/products/edit.vue?vue&type=script&lang=js&":
/*!***********************************************************************!*\
  !*** ./resources/js/pages/products/edit.vue?vue&type=script&lang=js& ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_edit_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--4-0!../../../../node_modules/vue-loader/lib??vue-loader-options!./edit.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/products/edit.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_edit_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvcGFnZXMvcHJvZHVjdHMvZWRpdC52dWU/YWE2YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUEsd0NBQTBMLENBQWdCLGdQQUFHLEVBQUMiLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvcGFnZXMvcHJvZHVjdHMvZWRpdC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS00LTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9lZGl0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS00LTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9lZGl0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/pages/products/edit.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./resources/js/pages/products/edit.vue?vue&type=template&id=0f50a2bc&scoped=true&":
/*!*****************************************************************************************!*\
  !*** ./resources/js/pages/products/edit.vue?vue&type=template&id=0f50a2bc&scoped=true& ***!
  \*****************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_6_node_modules_vue_loader_lib_index_js_vue_loader_options_edit_vue_vue_type_template_id_0f50a2bc_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--4-0!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!../../../../node_modules/vue-loader/lib??vue-loader-options!./edit.vue?vue&type=template&id=0f50a2bc&scoped=true& */ \"./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/products/edit.vue?vue&type=template&id=0f50a2bc&scoped=true&\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_6_node_modules_vue_loader_lib_index_js_vue_loader_options_edit_vue_vue_type_template_id_0f50a2bc_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_6_node_modules_vue_loader_lib_index_js_vue_loader_options_edit_vue_vue_type_template_id_0f50a2bc_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvcGFnZXMvcHJvZHVjdHMvZWRpdC52dWU/MWZlYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvcGFnZXMvcHJvZHVjdHMvZWRpdC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MGY1MGEyYmMmc2NvcGVkPXRydWUmLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNC0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz9yZWYtLTYhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9lZGl0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wZjUwYTJiYyZzY29wZWQ9dHJ1ZSZcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/pages/products/edit.vue?vue&type=template&id=0f50a2bc&scoped=true&\n");

/***/ })

}]);