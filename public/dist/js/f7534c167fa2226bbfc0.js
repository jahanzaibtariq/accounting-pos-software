(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[134],{

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/reports/summary.vue?vue&type=script&lang=js&":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/pages/reports/summary.vue?vue&type=script&lang=js& ***!
  \*********************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var vform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vform */ \"./node_modules/vform/dist/vform.common.js\");\n/* harmony import */ var vform__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vform__WEBPACK_IMPORTED_MODULE_0__);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  middleware: ['auth', 'check-permissions'],\n  metaInfo: function metaInfo() {\n    return {\n      title: this.$t('reports.summary.page_title')\n    };\n  },\n  data: function data() {\n    return {\n      breadcrumbsCurrent: 'reports.summary.breadcrumbs_current',\n      breadcrumbs: [{\n        name: 'reports.summary.breadcrumbs_first',\n        url: 'home'\n      }, {\n        name: 'reports.summary.breadcrumbs_second',\n        url: ''\n      }, {\n        name: 'reports.summary.breadcrumbs_active',\n        url: ''\n      }],\n      form: new vform__WEBPACK_IMPORTED_MODULE_0___default.a({\n        month: new Date().getMonth() + 1,\n        year: new Date().getFullYear(),\n        currentYear: new Date().getFullYear()\n      }),\n      reportInfo: '',\n      totalOpeningBalance: 0,\n      totalClosingBalance: 0,\n      totalCollection: 0,\n      totalExpense: 0,\n      totalTransfer: 0,\n      loading: false\n    };\n  },\n  computed: {\n    years: function years() {\n      return Array.from({\n        length: this.form.currentYear - 2020\n      }, function (value, index) {\n        return 2021 + index;\n      });\n    }\n  },\n  methods: {\n    // submit form\n    getReportData: function getReportData() {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this.loading = true;\n              _context.next = 3;\n              return _this.form.post(window.location.origin + '/api/reports/summery').then(function (response) {\n                _this.reportInfo = response.data;\n                _this.calculateSum(_this.reportInfo);\n                _this.loading = false;\n              })[\"catch\"](function () {\n                toast.fire({\n                  type: 'error',\n                  title: _this.$t('common.delete_failed')\n                });\n              });\n            case 3:\n              _this.form.currentYear = new Date().getFullYear();\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    // calculate sum\n    calculateSum: function calculateSum(allData) {\n      ;\n      var _ref = [0, 0, 0, 0, 0];\n      this.totalOpeningBalance = _ref[0];\n      this.totalClosingBalance = _ref[1];\n      this.totalCollection = _ref[2];\n      this.totalExpense = _ref[3];\n      this.totalTransfer = _ref[4];\n      this.totalOpeningBalance = allData.openingBalances.reduce(function (accumulator, current) {\n        return Number(accumulator) + Number(current.current_balance);\n      }, 0);\n      this.totalClosingBalance = allData.closingBalances.reduce(function (accumulator, current) {\n        return Number(accumulator) + Number(current.current_balance);\n      }, 0);\n      this.totalCollection = allData.accountCollections.reduce(function (accumulator, current) {\n        return Number(accumulator) + Number(current.total_collection);\n      }, 0);\n      this.totalExpense = allData.expenses + allData.payrolls + allData.loanInterest + allData.assetDepriciation;\n      this.totalTransfer = allData.balanceTransfers.reduce(function (accumulator, current) {\n        return Number(accumulator) + Number(current.amount);\n      }, 0);\n      return;\n    },\n    // print\n    printWindow: function printWindow() {\n      window.print();\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/reports/summary.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/reports/summary.vue?vue&type=template&id=46435dfd&":
/*!*******************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/pages/reports/summary.vue?vue&type=template&id=46435dfd& ***!
  \*******************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"div\", [_c(\"breadcrumbs\", {\n    attrs: {\n      items: _vm.breadcrumbs,\n      current: _vm.breadcrumbsCurrent\n    }\n  }), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"row no-print\"\n  }, [_c(\"div\", {\n    staticClass: \"col-lg-12\"\n  }, [_c(\"div\", {\n    staticClass: \"card\"\n  }, [_c(\"form\", {\n    attrs: {\n      role: \"form\"\n    },\n    on: {\n      submit: function submit($event) {\n        $event.preventDefault();\n        return _vm.getReportData.apply(null, arguments);\n      },\n      keydown: function keydown($event) {\n        return _vm.form.onKeydown($event);\n      }\n    }\n  }, [_c(\"div\", {\n    staticClass: \"card-body\"\n  }, [_c(\"div\", {\n    staticClass: \"row\"\n  }, [_c(\"div\", {\n    staticClass: \"form-group col-md-6\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"month\"\n    }\n  }, [_vm._v(\" \" + _vm._s(_vm.$t(\"common.month\")) + \" \")]), _vm._v(\" \"), _c(\"select\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.month,\n      expression: \"form.month\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"month\")\n    },\n    attrs: {\n      id: \"month\"\n    },\n    on: {\n      change: function change($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {\n          return o.selected;\n        }).map(function (o) {\n          var val = \"_value\" in o ? o._value : o.value;\n          return val;\n        });\n        _vm.$set(_vm.form, \"month\", $event.target.multiple ? $$selectedVal : $$selectedVal[0]);\n      }\n    }\n  }, [_c(\"option\", {\n    attrs: {\n      value: \"1\"\n    }\n  }, [_vm._v(\"January\")]), _vm._v(\" \"), _c(\"option\", {\n    attrs: {\n      value: \"2\"\n    }\n  }, [_vm._v(\"February\")]), _vm._v(\" \"), _c(\"option\", {\n    attrs: {\n      value: \"3\"\n    }\n  }, [_vm._v(\"March\")]), _vm._v(\" \"), _c(\"option\", {\n    attrs: {\n      value: \"4\"\n    }\n  }, [_vm._v(\"April\")]), _vm._v(\" \"), _c(\"option\", {\n    attrs: {\n      value: \"5\"\n    }\n  }, [_vm._v(\"May\")]), _vm._v(\" \"), _c(\"option\", {\n    attrs: {\n      value: \"6\"\n    }\n  }, [_vm._v(\"June\")]), _vm._v(\" \"), _c(\"option\", {\n    attrs: {\n      value: \"7\"\n    }\n  }, [_vm._v(\"July\")]), _vm._v(\" \"), _c(\"option\", {\n    attrs: {\n      value: \"8\"\n    }\n  }, [_vm._v(\"August\")]), _vm._v(\" \"), _c(\"option\", {\n    attrs: {\n      value: \"9\"\n    }\n  }, [_vm._v(\"September\")]), _vm._v(\" \"), _c(\"option\", {\n    attrs: {\n      value: \"10\"\n    }\n  }, [_vm._v(\"October\")]), _vm._v(\" \"), _c(\"option\", {\n    attrs: {\n      value: \"11\"\n    }\n  }, [_vm._v(\"November\")]), _vm._v(\" \"), _c(\"option\", {\n    attrs: {\n      value: \"12\"\n    }\n  }, [_vm._v(\"December\")])]), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"month\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-6\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"year\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.year\")))]), _vm._v(\" \"), _c(\"select\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.year,\n      expression: \"form.year\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"year\")\n    },\n    attrs: {\n      id: \"year\"\n    },\n    on: {\n      change: function change($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {\n          return o.selected;\n        }).map(function (o) {\n          var val = \"_value\" in o ? o._value : o.value;\n          return val;\n        });\n        _vm.$set(_vm.form, \"year\", $event.target.multiple ? $$selectedVal : $$selectedVal[0]);\n      }\n    }\n  }, _vm._l(_vm.years, function (year) {\n    return _c(\"option\", {\n      key: year,\n      domProps: {\n        value: year\n      }\n    }, [_vm._v(\"\\n                    \" + _vm._s(year) + \"\\n                  \")]);\n  }), 0), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"year\"\n    }\n  })], 1)])]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"card-footer\"\n  }, [_c(\"v-button\", {\n    staticClass: \"btn btn-primary\",\n    attrs: {\n      loading: _vm.form.busy\n    }\n  }, [_c(\"i\", {\n    staticClass: \"fas fa-eye\"\n  }), _vm._v(\" \" + _vm._s(_vm.$t(\"reports.view_report\")) + \"\\n            \")]), _vm._v(\" \"), _c(\"button\", {\n    staticClass: \"btn btn-secondary float-right\",\n    attrs: {\n      type: \"reset\"\n    },\n    on: {\n      click: function click($event) {\n        return _vm.form.reset();\n      }\n    }\n  }, [_c(\"i\", {\n    staticClass: \"fas fa-power-off\"\n  }), _vm._v(\" \" + _vm._s(_vm.$t(\"common.reset\")) + \"\\n            \")])], 1)])])])]), _vm._v(\" \"), _vm.reportInfo ? _c(\"div\", {\n    staticClass: \"row\"\n  }, [_c(\"div\", {\n    staticClass: \"col-lg-12 invoice p-3 mb-3\"\n  }, [_c(\"div\", {\n    staticClass: \"row invoice-info\"\n  }, [_c(\"div\", {\n    staticClass: \"m-auto invoice-col\"\n  }, [_c(\"CompanyInfo\", {\n    staticClass: \"text-center\"\n  })], 1)]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"row mt-3 position-relative\"\n  }, [_c(\"table-loading\", {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: _vm.loading,\n      expression: \"loading\"\n    }]\n  }), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"table-responsive col-xl-10 m-auto\"\n  }, [_c(\"table\", {\n    staticClass: \"table table-bordered table-striped table-sm\"\n  }, [_c(\"thead\", [_c(\"tr\", {\n    staticClass: \"success text-center\"\n  }, [_c(\"th\", {\n    attrs: {\n      colspan: \"3\"\n    }\n  }, [_c(\"h5\", [_vm._v(\"\\n                    \" + _vm._s(_vm.$t(\"reports.monthly_summery\")) + \":\\n                    \" + _vm._s(_vm.reportInfo.monthName) + \", \" + _vm._s(_vm.reportInfo.year)), _c(\"br\")])])])]), _vm._v(\" \"), _c(\"thead\", [_c(\"tr\", [_c(\"th\", [_vm._v(_vm._s(_vm.$t(\"common.s_no\")))]), _vm._v(\" \"), _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"reports.particulars\")))]), _vm._v(\" \"), _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"common.balance\")))])])]), _vm._v(\" \"), _c(\"thead\", [_c(\"tr\", [_c(\"th\", {\n    attrs: {\n      colspan: \"3\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"reports.opening_balance\")))])])]), _vm._v(\" \"), _c(\"tbody\", [_vm._l(_vm.reportInfo.openingBalances, function (data, i) {\n    return _c(\"tr\", {\n      key: i\n    }, [_c(\"td\", [_vm._v(_vm._s(++i))]), _vm._v(\" \"), _c(\"td\", [_vm._v(_vm._s(data.bank_name) + \" [\" + _vm._s(data.account_number) + \"]\")]), _vm._v(\" \"), _c(\"td\", [_vm._v(_vm._s(_vm._f(\"withAbsoluteCurrency\")(data.current_balance)))])]);\n  }), _vm._v(\" \"), _c(\"tr\", [_c(\"td\", {\n    staticClass: \"text-right\",\n    attrs: {\n      colspan: \"2\"\n    }\n  }, [_c(\"strong\", [_vm._v(_vm._s(_vm.$t(\"common.total\")))])]), _vm._v(\" \"), _c(\"td\", [_c(\"strong\", [_vm._v(\"\\n                    \" + _vm._s(_vm._f(\"withAbsoluteCurrency\")(_vm.totalOpeningBalance)) + \"\\n                  \")])])])], 2), _vm._v(\" \"), _c(\"thead\", [_c(\"tr\", [_c(\"th\", {\n    attrs: {\n      colspan: \"3\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"sidebar.sales\")))])])]), _vm._v(\" \"), _c(\"tbody\", [_c(\"tr\", [_c(\"td\", [_vm._v(\"1\")]), _vm._v(\" \"), _c(\"td\", [_vm._v(_vm._s(_vm.$t(\"reports.invoice_sales\")))]), _vm._v(\" \"), _c(\"td\", [_vm._v(_vm._s(_vm._f(\"withAbsoluteCurrency\")(_vm.reportInfo.invoiceSales)))])]), _vm._v(\" \"), _c(\"tr\", [_c(\"td\", [_vm._v(\"2\")]), _vm._v(\" \"), _c(\"td\", [_vm._v(_vm._s(_vm.$t(\"reports.invoice_dues\")))]), _vm._v(\" \"), _c(\"td\", [_vm._v(_vm._s(_vm._f(\"withAbsoluteCurrency\")(_vm.reportInfo.invoiceDue)))])])]), _vm._v(\" \"), _c(\"thead\", [_c(\"tr\", [_c(\"th\", {\n    attrs: {\n      colspan: \"3\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"reports.accounts_collection\")))])])]), _vm._v(\" \"), _c(\"tbody\", [_vm._l(_vm.reportInfo.accountCollections, function (data, i) {\n    return _c(\"tr\", {\n      key: i\n    }, [_c(\"td\", [_vm._v(_vm._s(++i))]), _vm._v(\" \"), _c(\"td\", [_vm._v(_vm._s(data.bank_name) + \" [\" + _vm._s(data.account_number) + \"]\")]), _vm._v(\" \"), _c(\"td\", [_vm._v(_vm._s(_vm._f(\"withAbsoluteCurrency\")(data.total_collection)))])]);\n  }), _vm._v(\" \"), _c(\"tr\", [_c(\"td\", {\n    staticClass: \"text-right\",\n    attrs: {\n      colspan: \"2\"\n    }\n  }, [_c(\"strong\", [_vm._v(_vm._s(_vm.$t(\"common.total\")))])]), _vm._v(\" \"), _c(\"td\", [_c(\"strong\", [_vm._v(_vm._s(_vm._f(\"withAbsoluteCurrency\")(_vm.totalCollection)))])])])], 2), _vm._v(\" \"), _c(\"thead\", [_c(\"tr\", [_c(\"th\", {\n    attrs: {\n      colspan: \"3\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"sidebar.expenses\")))])])]), _vm._v(\" \"), _c(\"tbody\", [_c(\"tr\", [_c(\"td\", {\n    attrs: {\n      colspan: \"2\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"sidebar.purchase\")))]), _vm._v(\" \"), _c(\"td\", [_vm._v(_vm._s(_vm._f(\"withAbsoluteCurrency\")(_vm.reportInfo.totalPurchase)))])]), _vm._v(\" \"), _c(\"tr\", [_c(\"td\", {\n    attrs: {\n      colspan: \"2\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"reports.general\")))]), _vm._v(\" \"), _c(\"td\", [_vm._v(_vm._s(_vm._f(\"withAbsoluteCurrency\")(_vm.reportInfo.expenses)))])]), _vm._v(\" \"), _c(\"tr\", [_c(\"td\", {\n    attrs: {\n      colspan: \"2\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"sidebar.payroll\")))]), _vm._v(\" \"), _c(\"td\", [_vm._v(_vm._s(_vm._f(\"withAbsoluteCurrency\")(_vm.reportInfo.payrolls)))])]), _vm._v(\" \"), _c(\"tr\", [_c(\"td\", {\n    attrs: {\n      colspan: \"2\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"reports.loan_interest\")))]), _vm._v(\" \"), _c(\"td\", [_vm._v(_vm._s(_vm._f(\"withAbsoluteCurrency\")(_vm.reportInfo.loanInterest)))])]), _vm._v(\" \"), _c(\"tr\", [_c(\"td\", {\n    attrs: {\n      colspan: \"2\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"reports.asset_depriciation\")))]), _vm._v(\" \"), _c(\"td\", [_vm._v(\"\\n                  \" + _vm._s(_vm._f(\"withAbsoluteCurrency\")(_vm.reportInfo.assetDepriciation)) + \"\\n                \")])]), _vm._v(\" \"), _c(\"tr\", [_c(\"td\", {\n    staticClass: \"text-right\",\n    attrs: {\n      colspan: \"2\"\n    }\n  }, [_c(\"strong\", [_vm._v(_vm._s(_vm.$t(\"common.total\")))])]), _vm._v(\" \"), _c(\"td\", [_c(\"strong\", [_vm._v(_vm._s(_vm._f(\"withAbsoluteCurrency\")(_vm.totalExpense)))])])])]), _vm._v(\" \"), _c(\"thead\", [_c(\"tr\", [_c(\"th\", {\n    attrs: {\n      colspan: \"3\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"reports.transfer\")))])])]), _vm._v(\" \"), _c(\"tbody\", [_vm._l(_vm.reportInfo.balanceTransfers, function (data, i) {\n    return _c(\"tr\", {\n      key: i\n    }, [_c(\"td\", [_vm._v(_vm._s(++i))]), _vm._v(\" \"), _c(\"td\", [_vm._v(\"\\n                  \" + _vm._s(_vm.$t(\"reports.transfer_from\")) + \" [\" + _vm._s(data.debit_transaction.cashbook_account.account_number) + \"] \" + _vm._s(_vm.$t(\"common.to\")) + \" [\" + _vm._s(data.credit_transaction.cashbook_account.account_number) + \"]\\n                \")]), _vm._v(\" \"), _c(\"td\", [_vm._v(_vm._s(_vm._f(\"withAbsoluteCurrency\")(data.amount)))])]);\n  }), _vm._v(\" \"), _c(\"tr\", [_c(\"td\", {\n    staticClass: \"text-right\",\n    attrs: {\n      colspan: \"2\"\n    }\n  }, [_c(\"strong\", [_vm._v(_vm._s(_vm.$t(\"common.total\")))])]), _vm._v(\" \"), _c(\"td\", [_c(\"strong\", [_vm._v(_vm._s(_vm._f(\"withAbsoluteCurrency\")(_vm.totalTransfer)))])])])], 2), _vm._v(\" \"), _c(\"thead\", [_c(\"tr\", [_c(\"th\", {\n    attrs: {\n      colspan: \"3\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"reports.closing_balance\")))])])]), _vm._v(\" \"), _c(\"tbody\", [_vm._l(_vm.reportInfo.closingBalances, function (data, i) {\n    return _c(\"tr\", {\n      key: i\n    }, [_c(\"td\", [_vm._v(_vm._s(++i))]), _vm._v(\" \"), _c(\"td\", [_vm._v(_vm._s(data.bank_name) + \" [\" + _vm._s(data.account_number) + \"]\")]), _vm._v(\" \"), _c(\"td\", [_vm._v(_vm._s(_vm._f(\"withAbsoluteCurrency\")(data.current_balance)))])]);\n  }), _vm._v(\" \"), _c(\"tr\", [_c(\"td\", {\n    staticClass: \"text-right\",\n    attrs: {\n      colspan: \"2\"\n    }\n  }, [_c(\"strong\", [_vm._v(_vm._s(_vm.$t(\"common.total\")))])]), _vm._v(\" \"), _c(\"td\", [_c(\"strong\", [_vm._v(_vm._s(_vm._f(\"withAbsoluteCurrency\")(_vm.totalClosingBalance)))])])])], 2)])])], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"row no-print mt-5\"\n  }, [_c(\"div\", {\n    staticClass: \"col-12\"\n  }, [_c(\"router-link\", {\n    staticClass: \"btn btn-dark float-right\",\n    attrs: {\n      to: {\n        name: \"home\"\n      }\n    }\n  }, [_c(\"i\", {\n    staticClass: \"fas fa-long-arrow-alt-left\"\n  }), _vm._v(\" \" + _vm._s(_vm.$t(\"common.back\")) + \"\\n          \")]), _vm._v(\" \"), _c(\"a\", {\n    staticClass: \"btn btn-default\",\n    attrs: {\n      href: \"#\"\n    },\n    on: {\n      click: _vm.printWindow\n    }\n  }, [_c(\"i\", {\n    staticClass: \"fas fa-print\"\n  }), _vm._v(\" \" + _vm._s(_vm.$t(\"common.print\")))])], 1)])])]) : _vm._e()], 1);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/reports/summary.vue?vue&type=template&id=46435dfd&\n");

/***/ }),

/***/ "./resources/js/pages/reports/summary.vue":
/*!************************************************!*\
  !*** ./resources/js/pages/reports/summary.vue ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _summary_vue_vue_type_template_id_46435dfd___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./summary.vue?vue&type=template&id=46435dfd& */ \"./resources/js/pages/reports/summary.vue?vue&type=template&id=46435dfd&\");\n/* harmony import */ var _summary_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./summary.vue?vue&type=script&lang=js& */ \"./resources/js/pages/reports/summary.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _summary_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _summary_vue_vue_type_template_id_46435dfd___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _summary_vue_vue_type_template_id_46435dfd___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"resources/js/pages/reports/summary.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvcGFnZXMvcmVwb3J0cy9zdW1tYXJ5LnZ1ZT80YzM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQXNGO0FBQzNCO0FBQ0w7OztBQUd0RDtBQUNnRztBQUNoRyxnQkFBZ0IsMkdBQVU7QUFDMUIsRUFBRSw2RUFBTTtBQUNSLEVBQUUsa0ZBQU07QUFDUixFQUFFLDJGQUFlO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsSUFBSSxLQUFVLEVBQUUsWUFpQmY7QUFDRDtBQUNlLGdGIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL2pzL3BhZ2VzL3JlcG9ydHMvc3VtbWFyeS52dWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL3N1bW1hcnkudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTQ2NDM1ZGZkJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL3N1bW1hcnkudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9zdW1tYXJ5LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRjpcXFxceGFtcHBcXFxcaHRkb2NzXFxcXGFzaWZcXFxcYWNjb3VudGluZy1wb3Mtc29mdHdhcmVcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnNDY0MzVkZmQnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnNDY0MzVkZmQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnNDY0MzVkZmQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL3N1bW1hcnkudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTQ2NDM1ZGZkJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzQ2NDM1ZGZkJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJyZXNvdXJjZXMvanMvcGFnZXMvcmVwb3J0cy9zdW1tYXJ5LnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/pages/reports/summary.vue\n");

/***/ }),

/***/ "./resources/js/pages/reports/summary.vue?vue&type=script&lang=js&":
/*!*************************************************************************!*\
  !*** ./resources/js/pages/reports/summary.vue?vue&type=script&lang=js& ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_summary_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--4-0!../../../../node_modules/vue-loader/lib??vue-loader-options!./summary.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/reports/summary.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_summary_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvcGFnZXMvcmVwb3J0cy9zdW1tYXJ5LnZ1ZT82MmU3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQSx3Q0FBNkwsQ0FBZ0IsbVBBQUcsRUFBQyIsImZpbGUiOiIuL3Jlc291cmNlcy9qcy9wYWdlcy9yZXBvcnRzL3N1bW1hcnkudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNC0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vc3VtbWFyeS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNC0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vc3VtbWFyeS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/pages/reports/summary.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./resources/js/pages/reports/summary.vue?vue&type=template&id=46435dfd&":
/*!*******************************************************************************!*\
  !*** ./resources/js/pages/reports/summary.vue?vue&type=template&id=46435dfd& ***!
  \*******************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_6_node_modules_vue_loader_lib_index_js_vue_loader_options_summary_vue_vue_type_template_id_46435dfd___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--4-0!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!../../../../node_modules/vue-loader/lib??vue-loader-options!./summary.vue?vue&type=template&id=46435dfd& */ \"./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/reports/summary.vue?vue&type=template&id=46435dfd&\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_6_node_modules_vue_loader_lib_index_js_vue_loader_options_summary_vue_vue_type_template_id_46435dfd___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_6_node_modules_vue_loader_lib_index_js_vue_loader_options_summary_vue_vue_type_template_id_46435dfd___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvcGFnZXMvcmVwb3J0cy9zdW1tYXJ5LnZ1ZT8zODcwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSIsImZpbGUiOiIuL3Jlc291cmNlcy9qcy9wYWdlcy9yZXBvcnRzL3N1bW1hcnkudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTQ2NDM1ZGZkJi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTQtMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/cmVmLS02IS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vc3VtbWFyeS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NDY0MzVkZmQmXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/pages/reports/summary.vue?vue&type=template&id=46435dfd&\n");

/***/ })

}]);