(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[143],{

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/sales/returns/edit.vue?vue&type=script&lang=js&":
/*!************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/pages/sales/returns/edit.vue?vue&type=script&lang=js& ***!
  \************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var vform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vform */ \"./node_modules/vform/dist/vform.common.js\");\n/* harmony import */ var vform__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vform__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var vuex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vuex */ \"./node_modules/vuex/dist/vuex.esm.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  middleware: ['auth', 'check-permissions'],\n  metaInfo: function metaInfo() {\n    return {\n      title: this.$t('sales.returns.edit.page_title')\n    };\n  },\n  data: function data() {\n    return {\n      breadcrumbsCurrent: 'sales.returns.edit.breadcrumbs_current',\n      breadcrumbs: [{\n        name: 'sales.returns.edit.breadcrumbs_first',\n        url: 'home'\n      }, {\n        name: 'sales.returns.edit.breadcrumbs_second',\n        url: 'invoiceReturns.index'\n      }, {\n        name: 'sales.returns.edit.breadcrumbs_active',\n        url: ''\n      }],\n      form: new vform__WEBPACK_IMPORTED_MODULE_0___default.a({\n        invoiceNo: '',\n        invoiceReturnNo: '',\n        returnReason: '',\n        account: '',\n        availableBalance: 0,\n        chequeNo: '',\n        receiptNo: '',\n        client: '',\n        clientName: '',\n        invoice: '',\n        invoiceTotal: 0,\n        product: '',\n        selectedProducts: [],\n        totalReturn: 0,\n        invoiceTax: 0,\n        invoiceTaxRate: 0,\n        invoiceTransport: 0,\n        invoiceDiscount: 0,\n        discountPercentage: 0,\n        discountType: '',\n        invoiceDue: 0,\n        newSubTotal: 0,\n        returnSubtotal: 0,\n        invoicePaid: 0,\n        newDue: 0,\n        newDueText: '',\n        returnAmount: 0,\n        returnAmountText: 0,\n        date: new Date().toISOString().slice(0, 10),\n        note: '',\n        status: 1\n      }),\n      products: '',\n      accounts: '',\n      clientInvoices: '',\n      prefix: '',\n      purchasePrefix: '',\n      purchaseReturnPrefix: ''\n    };\n  },\n  computed: _objectSpread({}, Object(vuex__WEBPACK_IMPORTED_MODULE_1__[\"mapGetters\"])('operations', ['items', 'appInfo'])),\n  created: function created() {\n    this.getInvoiceReturn();\n    this.getAccounts();\n    this.prefix = this.appInfo.productPrefix;\n    this.purchasePrefix = this.appInfo.purchasePrefix;\n    this.purchaseReturnPrefix = this.appInfo.purchaseReturnPrefix;\n  },\n  methods: {\n    // get accounts\n    getAccounts: function getAccounts() {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _yield$_this$form$get, data;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.form.get(window.location.origin + '/api/all-accounts');\n            case 2:\n              _yield$_this$form$get = _context.sent;\n              data = _yield$_this$form$get.data;\n              _this.accounts = data.data;\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    // update available balance\n    updateBalance: function updateBalance() {\n      this.form.availableBalance = 0;\n      if (this.form.account) {\n        this.form.availableBalance = this.form.account.availableBalance;\n      }\n      return;\n    },\n    // get the invoice return\n    getInvoiceReturn: function getInvoiceReturn() {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _yield$_this2$form$ge, data;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _this2.form.get(window.location.origin + '/api/invoice-returns/' + _this2.$route.params.slug);\n            case 2:\n              _yield$_this2$form$ge = _context2.sent;\n              data = _yield$_this2$form$ge.data;\n              _this2.form.invoiceNo = data.data.invoice.invoiceLabel;\n              _this2.form.invoiceReturnNo = _this2.$options.filters.withPrefix(data.data.returnNo, _this2.purchaseReturnPrefix);\n              _this2.form.returnReason = data.data.reason;\n              _this2.form.availableBalance = data.data.account.availableBalance;\n              _this2.form.account = data.data.account;\n              _this2.form.chequeNo = data.data.accountPayable ? data.data.accountPayable.cheque_no : '';\n              _this2.form.receiptNo = data.data.accountPayable ? data.data.accountPayable.receipt_no : '';\n              _this2.form.clientName = data.data.client.name;\n              _this2.form.date = data.data.returnDate;\n              _this2.form.note = data.data.note;\n              _this2.form.status = data.data.status;\n              _this2.form.client = data.data.client;\n              _this2.form.invoice = data.data.invoice;\n              _this2.form.invoiceTaxRate = data.data.invoice.taxRate;\n              _this2.form.invoiceTax = data.data.invoice.tax;\n              _this2.form.clientAdvance = data.data.creditAmount;\n              _this2.form.clientAdvanceText = data.data.creditAmount;\n              _this2.form.invoiceDue = data.data.invoice.due;\n              _this2.form.newDueText = data.data.invoice.due;\n              _this2.form.invoiceTransport = data.data.invoice.transport;\n              _this2.form.discountType = data.data.invoice.discountType;\n              _this2.form.discountPercentage = data.data.invoice.discountPercentage;\n              _this2.form.invoiceDiscount = data.data.invoice.discount;\n              _this2.form.invoicePaid = data.data.invoice.invoicePaid;\n              _this2.form.invoiceTotal = data.data.invoice.invoiceTotal;\n              _this2.form.selectedProducts = _this2.assignProducts(data.data.invoiceReturnProducts);\n            case 30:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    },\n    // assign products\n    assignProducts: function assignProducts(products) {\n      this.form.selectedProducts = [];\n      for (var key in products) {\n        var invoiceReturnItem = products[key];\n        this.form.selectedProducts.unshift({\n          id: invoiceReturnItem.productID,\n          slug: invoiceReturnItem.productSlug,\n          name: invoiceReturnItem.productName,\n          code: invoiceReturnItem.productCode,\n          unit: invoiceReturnItem.productUnit,\n          oldQty: invoiceReturnItem.returnQty,\n          invoiceQty: invoiceReturnItem.invoiceQty,\n          maxQty: invoiceReturnItem.invoiceQty - 1,\n          returnQty: invoiceReturnItem.returnQty,\n          returnTotal: invoiceReturnItem.returnQty * invoiceReturnItem.salePrice,\n          sellingPrice: invoiceReturnItem.salePrice,\n          unitCost: invoiceReturnItem.salePrice,\n          purchasePrice: invoiceReturnItem.avgPurchasePrice,\n          totalPrice: invoiceReturnItem.invoiceQty * invoiceReturnItem.salePrice\n        });\n      }\n      this.calculateSum();\n      return this.form.selectedProducts;\n    },\n    // updateItems\n    updateItem: function updateItem(value, index) {\n      var selectedProduct = this.form.selectedProducts[index];\n      if (selectedProduct && value >= 0 && value < selectedProduct.maxQty) {\n        selectedProduct.returnQty = Number(value);\n        selectedProduct.returnTotal = selectedProduct.returnQty * selectedProduct.unitCost;\n        this.form.selectedProducts[index] = selectedProduct;\n      }\n      this.calculateSum();\n    },\n    // calculate sum\n    calculateSum: function calculateSum() {\n      // calculate total\n      var length = this.form.selectedProducts.length;\n      this.form.newSubTotal = this.form.returnSubtotal = this.form.totalReturn = 0;\n      for (var i = 0; i < length; i++) {\n        var looProduct = this.form.selectedProducts[i];\n        this.form.newSubTotal += Number(((looProduct.qty - looProduct.returnQty) * looProduct.unitCost).toFixed(2));\n        this.form.totalReturn += Number(looProduct.returnTotal.toFixed(2));\n        this.form.returnSubtotal += Number((looProduct.returnQty * looProduct.unitCost).toFixed(2));\n      }\n\n      // update discount\n      if (this.form.discountType == 1) {\n        this.form.invoiceDiscount = Number((this.form.discountPercentage / 100 * this.form.newSubTotal).toFixed(2));\n      }\n\n      // update tax, total and due\n      this.form.invoiceTax = Number((this.form.invoiceTaxRate / 100 * (this.form.invoice.subTotal - this.form.totalReturn)).toFixed(2));\n      this.form.invoiceTotal = Number((this.form.invoice.subTotal - this.form.returnSubtotal + this.form.invoiceTax + this.form.invoiceTransport - this.form.invoiceDiscount).toFixed(2));\n      this.form.invoiceDue = Number((this.form.invoiceTotal - this.form.invoice.totalPaid).toFixed(2));\n\n      // calculate new due or payable\n      if (this.form.invoiceDue >= 0) {\n        this.form.newDue = this.form.invoiceDue;\n        this.form.newDueText = this.form.invoiceTotal + ' - ' + this.form.invoice.totalPaid + ' = ' + Number(this.form.newDue).toFixed(2);\n        this.form.returnAmount = 0;\n      } else {\n        this.form.returnAmount = Number((this.form.invoice.totalPaid - this.form.invoiceTotal).toFixed(2));\n        this.form.returnAmountText = this.form.invoice.totalPaid + ' - ' + this.form.invoiceTotal + ' = ' + this.form.returnAmount;\n        this.form.invoiceDue = this.form.newDue = 0;\n      }\n      return;\n    },\n    // update invoice return\n    updateInvoiceReturn: function updateInvoiceReturn() {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _this3.form.patch(window.location.origin + '/api/invoice-returns/' + _this3.$route.params.slug).then(function (response) {\n                toast.fire({\n                  type: 'success',\n                  title: _this3.$t('sales.returns.edit.success_msg')\n                });\n                _this3.$router.push({\n                  name: 'invoiceReturns.index'\n                });\n              })[\"catch\"](function () {\n                toast.fire({\n                  type: 'error',\n                  title: _this3.$t('common.error_msg')\n                });\n              });\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }))();\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/sales/returns/edit.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/sales/returns/edit.vue?vue&type=template&id=51292422&scoped=true&":
/*!**********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/pages/sales/returns/edit.vue?vue&type=template&id=51292422&scoped=true& ***!
  \**********************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"div\", [_c(\"breadcrumbs\", {\n    attrs: {\n      items: _vm.breadcrumbs,\n      current: _vm.breadcrumbsCurrent\n    }\n  }), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"row\"\n  }, [_c(\"div\", {\n    staticClass: \"col-lg-12 col-xl-12\"\n  }, [_c(\"div\", {\n    staticClass: \"card\"\n  }, [_c(\"div\", {\n    staticClass: \"card-header\"\n  }, [_c(\"h3\", {\n    staticClass: \"card-title\"\n  }, [_vm._v(\"\\n            \" + _vm._s(_vm.$t(\"sales.returns.edit.form_title\")) + \"\\n          \")]), _vm._v(\" \"), _c(\"router-link\", {\n    staticClass: \"btn btn-dark float-right\",\n    attrs: {\n      to: {\n        name: \"invoiceReturns.index\"\n      }\n    }\n  }, [_c(\"i\", {\n    staticClass: \"fas fa-long-arrow-alt-left\"\n  }), _vm._v(\" \" + _vm._s(_vm.$t(\"common.back\")) + \"\\n          \")])], 1), _vm._v(\" \"), _c(\"form\", {\n    attrs: {\n      role: \"form\"\n    },\n    on: {\n      submit: function submit($event) {\n        $event.preventDefault();\n        return _vm.updateInvoiceReturn.apply(null, arguments);\n      },\n      keydown: function keydown($event) {\n        return _vm.form.onKeydown($event);\n      }\n    }\n  }, [_c(\"div\", {\n    staticClass: \"card-body\"\n  }, [_c(\"div\", {\n    staticClass: \"row\"\n  }, [_c(\"div\", {\n    staticClass: \"form-group col-md-6\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"invoiceNo\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.invoice_no\")))]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.invoiceNo,\n      expression: \"form.invoiceNo\"\n    }],\n    staticClass: \"form-control\",\n    attrs: {\n      id: \"invoiceNo\",\n      type: \"text\",\n      name: \"invoiceNo\",\n      readonly: \"\"\n    },\n    domProps: {\n      value: _vm.form.invoiceNo\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"invoiceNo\", $event.target.value);\n      }\n    }\n  })]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-6\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"invoiceReturnNo\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.invoice_return_no\")))]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.invoiceReturnNo,\n      expression: \"form.invoiceReturnNo\"\n    }],\n    staticClass: \"form-control\",\n    attrs: {\n      id: \"invoiceReturnNo\",\n      type: \"text\",\n      name: \"invoiceReturnNo\",\n      readonly: \"\"\n    },\n    domProps: {\n      value: _vm.form.invoiceReturnNo\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"invoiceReturnNo\", $event.target.value);\n      }\n    }\n  })])]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"row\"\n  }, [_c(\"div\", {\n    staticClass: \"form-group col-md-6\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"returnReason\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.return_reason\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.returnReason,\n      expression: \"form.returnReason\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"returnReason\")\n    },\n    attrs: {\n      id: \"returnReason\",\n      type: \"text\",\n      name: \"returnReason\",\n      placeholder: _vm.$t(\"common.return_reason_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.returnReason\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"returnReason\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"returnReason\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-6\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"clientName\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.client\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.clientName,\n      expression: \"form.clientName\"\n    }],\n    staticClass: \"form-control\",\n    attrs: {\n      type: \"text\",\n      name: \"clientName\",\n      readonly: \"\"\n    },\n    domProps: {\n      value: _vm.form.clientName\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"clientName\", $event.target.value);\n      }\n    }\n  })])]), _vm._v(\" \"), _vm.form.selectedProducts && _vm.form.selectedProducts.length > 0 ? _c(\"div\", {\n    staticClass: \"row mt-3 mb-2\"\n  }, [_vm.form.errors.errors && _vm.form.errors.errors.selectedProducts ? _c(\"div\", {\n    staticClass: \"w-95 m-auto\"\n  }, _vm._l(_vm.form.errors.errors.selectedProducts, function (msg, i) {\n    return _c(\"div\", {\n      key: i,\n      staticClass: \"callout callout-danger\"\n    }, [_c(\"p\", [_c(\"i\", {\n      staticClass: \"icon fas fa-ban\"\n    }), _vm._v(\" \" + _vm._s(msg))])]);\n  }), 0) : _vm._e(), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"table-responsive table-custom w-95 m-auto\"\n  }, [_c(\"table\", {\n    staticClass: \"table table-hover table-sm text-center\"\n  }, [_c(\"thead\", [_c(\"tr\", [_c(\"th\", [_vm._v(_vm._s(_vm.$t(\"common.s_no\")))]), _vm._v(\" \"), _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"common.code\")))]), _vm._v(\" \"), _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"common.product_name\")))]), _vm._v(\" \"), _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"common.invoice_qty\")))]), _vm._v(\" \"), _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"common.current_qty\")))]), _vm._v(\" \"), _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"common.return_qty\")))]), _vm._v(\" \"), _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"common.unit_price\")))]), _vm._v(\" \"), _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"common.total_price\")))]), _vm._v(\" \"), _c(\"th\", {\n    staticClass: \"text-right\"\n  }, [_vm._v(\"\\n                        \" + _vm._s(_vm.$t(\"common.return_price\")) + \"\\n                      \")])])]), _vm._v(\" \"), _c(\"tbody\", [_vm._l(_vm.form.selectedProducts, function (item, i) {\n    return _c(\"tr\", {\n      key: i\n    }, [_c(\"td\", [_vm._v(_vm._s(++i))]), _vm._v(\" \"), _c(\"td\", [_vm._v(_vm._s(_vm._f(\"withPrefix\")(item.code, _vm.prefix)))]), _vm._v(\" \"), _c(\"td\", [_vm.$can(\"product-view\") ? _c(\"router-link\", {\n      attrs: {\n        to: {\n          name: \"products.show\",\n          params: {\n            slug: item.slug\n          }\n        }\n      }\n    }, [_vm._v(\"\\n                          \" + _vm._s(item.name) + \"\\n                        \")]) : _c(\"span\", [_vm._v(_vm._s(item.name))])], 1), _vm._v(\" \"), _c(\"td\", [_vm._v(_vm._s(item.invoiceQty) + \" \" + _vm._s(item.unit))]), _vm._v(\" \"), _c(\"td\", [_vm._v(\"\\n                        \" + _vm._s(item.invoiceQty - item.oldQty) + \" \" + _vm._s(item.unit) + \"\\n                      \")]), _vm._v(\" \"), _c(\"td\", [_c(\"div\", {\n      staticClass: \"input-group custom-qty-input\"\n    }, [_c(\"input\", {\n      staticClass: \"button-minus icon-shape icon-sm btn-danger\",\n      attrs: {\n        type: \"button\",\n        value: \"-\",\n        \"data-field\": \"quantity\"\n      },\n      on: {\n        click: function click($event) {\n          return _vm.updateItem(item.returnQty - 1, i - 1);\n        }\n      }\n    }), _vm._v(\" \"), _c(\"input\", {\n      staticClass: \"quantity-field border-0 incrementor\",\n      attrs: {\n        type: \"number\",\n        step: \"any\",\n        id: \"returnQty-\".concat(i),\n        min: \"0\",\n        max: item.maxQty,\n        name: \"quantity\",\n        placeholder: \"Return Qty\"\n      },\n      domProps: {\n        value: item.returnQty\n      },\n      on: {\n        change: function change($event) {\n          return _vm.updateItem($event.target.value, i - 1);\n        },\n        keyup: function keyup($event) {\n          return _vm.updateItem($event.target.value, i - 1);\n        }\n      }\n    }), _vm._v(\" \"), _c(\"input\", {\n      staticClass: \"button-plus icon-shape icon-sm btn-primary\",\n      attrs: {\n        type: \"button\",\n        value: \"+\",\n        \"data-field\": \"quantity\"\n      },\n      on: {\n        click: function click($event) {\n          return _vm.updateItem(item.returnQty + 1, i - 1);\n        }\n      }\n    })])]), _vm._v(\" \"), _c(\"td\", [_vm._v(_vm._s(_vm._f(\"withCurrency\")(item.sellingPrice)))]), _vm._v(\" \"), _c(\"td\", [_vm._v(_vm._s(_vm._f(\"withCurrency\")(item.totalPrice)))]), _vm._v(\" \"), _c(\"td\", {\n      staticClass: \"text-right\"\n    }, [_vm._v(\"\\n                        \" + _vm._s(_vm._f(\"withCurrency\")(item.returnTotal)) + \"\\n                      \")])]);\n  }), _vm._v(\" \"), _vm.form.invoice ? _c(\"tr\", [_c(\"td\", {\n    staticClass: \"text-right\",\n    attrs: {\n      colspan: \"7\"\n    }\n  }, [_c(\"strong\", [_vm._v(_vm._s(_vm.$t(\"common.subtotal\")))])]), _vm._v(\" \"), _c(\"td\", [_c(\"strong\", [_vm._v(_vm._s(_vm._f(\"withCurrency\")(_vm.form.returnSubtotal)))])]), _vm._v(\" \"), _c(\"td\", {\n    staticClass: \"text-right\"\n  }, [_c(\"strong\", [_vm._v(_vm._s(_vm._f(\"withCurrency\")(_vm.form.totalReturn)))])])]) : _vm._e()], 2)])])]) : _vm._e(), _vm._v(\" \"), _vm.form.invoice ? _c(\"div\", {\n    staticClass: \"row\"\n  }, [_vm.form.discountPercentage > 0 ? _c(\"div\", {\n    staticClass: \"form-group col-md-2\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"discountType\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.discount_type\")))]), _vm._v(\" \"), _c(\"select\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.discountType,\n      expression: \"form.discountType\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"discountType\")\n    },\n    attrs: {\n      id: \"discountType\",\n      step: \"any\",\n      name: \"discountType\",\n      disabled: \"\"\n    },\n    on: {\n      change: function change($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {\n          return o.selected;\n        }).map(function (o) {\n          var val = \"_value\" in o ? o._value : o.value;\n          return val;\n        });\n        _vm.$set(_vm.form, \"discountType\", $event.target.multiple ? $$selectedVal : $$selectedVal[0]);\n      }\n    }\n  }, [_c(\"option\", {\n    attrs: {\n      value: \"0\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.fixed\")))]), _vm._v(\" \"), _c(\"option\", {\n    attrs: {\n      value: \"1\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.percentage\")) + \"(%)\")])]), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"discountType\"\n    }\n  })], 1) : _vm._e(), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group\",\n    \"class\": _vm.form.discountPercentage > 0 ? \"col-md-2\" : \"col-md-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"invoiceDiscount\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.total_discount\")))]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.invoiceDiscount,\n      expression: \"form.invoiceDiscount\"\n    }],\n    staticClass: \"form-control\",\n    attrs: {\n      id: \"invoiceDiscount\",\n      type: \"number\",\n      step: \"any\",\n      name: \"invoiceDiscount\",\n      readonly: \"\"\n    },\n    domProps: {\n      value: _vm.form.invoiceDiscount\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"invoiceDiscount\", $event.target.value);\n      }\n    }\n  })]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"invoiceTransport\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.transport_cost\")))]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.invoiceTransport,\n      expression: \"form.invoiceTransport\"\n    }],\n    staticClass: \"form-control\",\n    attrs: {\n      id: \"invoiceTransport\",\n      type: \"number\",\n      step: \"any\",\n      name: \"invoiceTransport\",\n      readonly: \"\"\n    },\n    domProps: {\n      value: _vm.form.invoiceTransport\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"invoiceTransport\", $event.target.value);\n      }\n    }\n  })]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"invoiceTax\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"sales.common.invoice_tax\")))]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.invoiceTax,\n      expression: \"form.invoiceTax\"\n    }],\n    staticClass: \"form-control\",\n    attrs: {\n      id: \"invoiceTax\",\n      type: \"number\",\n      step: \"any\",\n      name: \"invoiceTax\",\n      readonly: \"\"\n    },\n    domProps: {\n      value: _vm.form.invoiceTax\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"invoiceTax\", $event.target.value);\n      }\n    }\n  })])]) : _vm._e(), _vm._v(\" \"), _vm.form.invoice ? _c(\"div\", {\n    staticClass: \"row\"\n  }, [_c(\"div\", {\n    staticClass: \"form-group col-md-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"invoiceTotal\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"sales.common.invoice_total\")))]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.invoiceTotal,\n      expression: \"form.invoiceTotal\"\n    }],\n    staticClass: \"form-control\",\n    attrs: {\n      id: \"invoiceTotal\",\n      type: \"number\",\n      step: \"any\",\n      name: \"invoiceTotal\",\n      readonly: \"\"\n    },\n    domProps: {\n      value: _vm.form.invoiceTotal\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"invoiceTotal\", $event.target.value);\n      }\n    }\n  })]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"totalPaid\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.total_paid\")))]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.invoice.totalPaid,\n      expression: \"form.invoice.totalPaid\"\n    }],\n    staticClass: \"form-control\",\n    attrs: {\n      id: \"totalPaid\",\n      type: \"number\",\n      step: \"any\",\n      name: \"totalPaid\",\n      readonly: \"\"\n    },\n    domProps: {\n      value: _vm.form.invoice.totalPaid\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form.invoice, \"totalPaid\", $event.target.value);\n      }\n    }\n  })]), _vm._v(\" \"), _vm.form.returnAmount > 0 ? _c(\"div\", {\n    staticClass: \"form-group col-md-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"returnAmountText\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.return_amount\")))]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.returnAmountText,\n      expression: \"form.returnAmountText\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"returnAmountText\")\n    },\n    attrs: {\n      id: \"returnAmountText\",\n      type: \"text\",\n      name: \"returnAmountText\",\n      readonly: \"\"\n    },\n    domProps: {\n      value: _vm.form.returnAmountText\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"returnAmountText\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"returnAmountText\"\n    }\n  })], 1) : _c(\"div\", {\n    staticClass: \"form-group col-md-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"newDueText\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"sales.common.new_due\")))]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.newDueText,\n      expression: \"form.newDueText\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"newDueText\")\n    },\n    attrs: {\n      id: \"newDueText\",\n      type: \"text\",\n      name: \"newDueText\",\n      readonly: \"\"\n    },\n    domProps: {\n      value: _vm.form.newDueText\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"newDueText\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"newDueText\"\n    }\n  })], 1)]) : _vm._e(), _vm._v(\" \"), _vm.accounts && _vm.form.returnAmount > 0 ? _c(\"div\", {\n    staticClass: \"row\"\n  }, [_c(\"div\", {\n    staticClass: \"form-group col-md-4\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"account\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.account\")) + \"\\n                  \"), _c(\"span\", {\n    staticClass: \"required\"\n  }, [_vm._v(\"*\")])]), _vm._v(\" \"), _c(\"v-select\", {\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"account\")\n    },\n    attrs: {\n      options: _vm.accounts,\n      label: \"label\",\n      name: \"account\",\n      placeholder: _vm.$t(\"common.account_placeholder\")\n    },\n    on: {\n      input: _vm.updateBalance\n    },\n    model: {\n      value: _vm.form.account,\n      callback: function callback($$v) {\n        _vm.$set(_vm.form, \"account\", $$v);\n      },\n      expression: \"form.account\"\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"account\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-2\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"availableBalance\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.available_balance\")))]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.availableBalance,\n      expression: \"form.availableBalance\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"availableBalance\")\n    },\n    attrs: {\n      id: \"availableBalance\",\n      type: \"number\",\n      step: \"any\",\n      name: \"availableBalance\",\n      readonly: \"\"\n    },\n    domProps: {\n      value: _vm.form.availableBalance\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"availableBalance\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"availableBalance\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-3\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"chequeNo\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.cheque_no\")))]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.chequeNo,\n      expression: \"form.chequeNo\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"chequeNo\")\n    },\n    attrs: {\n      id: \"chequeNo\",\n      type: \"text\",\n      step: \"any\",\n      name: \"chequeNo\",\n      placeholder: _vm.$t(\"common.cheque_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.chequeNo\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"chequeNo\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"chequeNo\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-3\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"receiptNo\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.receipt_no\")))]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.receiptNo,\n      expression: \"form.receiptNo\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"receiptNo\")\n    },\n    attrs: {\n      id: \"receiptNo\",\n      type: \"text\",\n      name: \"receiptNo\",\n      placeholder: _vm.$t(\"common.receipt_no_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.receiptNo\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"receiptNo\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"receiptNo\"\n    }\n  })], 1)]) : _vm._e(), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"note\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.note\")))]), _vm._v(\" \"), _c(\"textarea\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.note,\n      expression: \"form.note\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"note\")\n    },\n    attrs: {\n      id: \"note\",\n      placeholder: _vm.$t(\"common.note_placeholder\")\n    },\n    domProps: {\n      value: _vm.form.note\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"note\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"note\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"row\"\n  }, [_c(\"div\", {\n    staticClass: \"form-group col-md-6\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"date\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"sales.common.return_date\")))]), _vm._v(\" \"), _c(\"input\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.date,\n      expression: \"form.date\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"date\")\n    },\n    attrs: {\n      id: \"date\",\n      type: \"date\",\n      name: \"date\"\n    },\n    domProps: {\n      value: _vm.form.date\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.form, \"date\", $event.target.value);\n      }\n    }\n  }), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"date\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"form-group col-md-6\"\n  }, [_c(\"label\", {\n    attrs: {\n      \"for\": \"status\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.status\")))]), _vm._v(\" \"), _c(\"select\", {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.form.status,\n      expression: \"form.status\"\n    }],\n    staticClass: \"form-control\",\n    \"class\": {\n      \"is-invalid\": _vm.form.errors.has(\"status\")\n    },\n    attrs: {\n      id: \"status\"\n    },\n    on: {\n      change: function change($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {\n          return o.selected;\n        }).map(function (o) {\n          var val = \"_value\" in o ? o._value : o.value;\n          return val;\n        });\n        _vm.$set(_vm.form, \"status\", $event.target.multiple ? $$selectedVal : $$selectedVal[0]);\n      }\n    }\n  }, [_c(\"option\", {\n    attrs: {\n      value: \"1\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.active\")))]), _vm._v(\" \"), _c(\"option\", {\n    attrs: {\n      value: \"0\"\n    }\n  }, [_vm._v(_vm._s(_vm.$t(\"common.in_active\")))])]), _vm._v(\" \"), _c(\"has-error\", {\n    attrs: {\n      form: _vm.form,\n      field: \"status\"\n    }\n  })], 1)])]), _vm._v(\" \"), _c(\"div\", {\n    staticClass: \"card-footer\"\n  }, [_c(\"v-button\", {\n    staticClass: \"btn btn-primary\",\n    attrs: {\n      loading: _vm.form.busy\n    }\n  }, [_c(\"i\", {\n    staticClass: \"fas fa-edit\"\n  }), _vm._v(\" \" + _vm._s(_vm.$t(\"common.save_changes\")) + \"\\n            \")]), _vm._v(\" \"), _c(\"button\", {\n    staticClass: \"btn btn-secondary float-right\",\n    attrs: {\n      type: \"reset\"\n    },\n    on: {\n      click: function click($event) {\n        return _vm.form.reset();\n      }\n    }\n  }, [_c(\"i\", {\n    staticClass: \"fas fa-power-off\"\n  }), _vm._v(\" \" + _vm._s(_vm.$t(\"common.reset\")) + \"\\n            \")])], 1)])])])])], 1);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/sales/returns/edit.vue?vue&type=template&id=51292422&scoped=true&\n");

/***/ }),

/***/ "./resources/js/pages/sales/returns/edit.vue":
/*!***************************************************!*\
  !*** ./resources/js/pages/sales/returns/edit.vue ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _edit_vue_vue_type_template_id_51292422_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./edit.vue?vue&type=template&id=51292422&scoped=true& */ \"./resources/js/pages/sales/returns/edit.vue?vue&type=template&id=51292422&scoped=true&\");\n/* harmony import */ var _edit_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./edit.vue?vue&type=script&lang=js& */ \"./resources/js/pages/sales/returns/edit.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _edit_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _edit_vue_vue_type_template_id_51292422_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _edit_vue_vue_type_template_id_51292422_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  \"51292422\",\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"resources/js/pages/sales/returns/edit.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvcGFnZXMvc2FsZXMvcmV0dXJucy9lZGl0LnZ1ZT81MDAwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQStGO0FBQ3ZDO0FBQ0w7OztBQUduRDtBQUNtRztBQUNuRyxnQkFBZ0IsMkdBQVU7QUFDMUIsRUFBRSwwRUFBTTtBQUNSLEVBQUUsMkZBQU07QUFDUixFQUFFLG9HQUFlO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsSUFBSSxLQUFVLEVBQUUsWUFpQmY7QUFDRDtBQUNlLGdGIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL2pzL3BhZ2VzL3NhbGVzL3JldHVybnMvZWRpdC52dWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL2VkaXQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTUxMjkyNDIyJnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2VkaXQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9lZGl0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiNTEyOTI0MjJcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJGOlxcXFx4YW1wcFxcXFxodGRvY3NcXFxcYXNpZlxcXFxhY2NvdW50aW5nLXBvcy1zb2Z0d2FyZVxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCc1MTI5MjQyMicpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCc1MTI5MjQyMicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCc1MTI5MjQyMicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vZWRpdC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NTEyOTI0MjImc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignNTEyOTI0MjInLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInJlc291cmNlcy9qcy9wYWdlcy9zYWxlcy9yZXR1cm5zL2VkaXQudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/pages/sales/returns/edit.vue\n");

/***/ }),

/***/ "./resources/js/pages/sales/returns/edit.vue?vue&type=script&lang=js&":
/*!****************************************************************************!*\
  !*** ./resources/js/pages/sales/returns/edit.vue?vue&type=script&lang=js& ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_edit_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../node_modules/babel-loader/lib??ref--4-0!../../../../../node_modules/vue-loader/lib??vue-loader-options!./edit.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/sales/returns/edit.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_edit_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvcGFnZXMvc2FsZXMvcmV0dXJucy9lZGl0LnZ1ZT85YzZiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQSx3Q0FBZ00sQ0FBZ0IsZ1BBQUcsRUFBQyIsImZpbGUiOiIuL3Jlc291cmNlcy9qcy9wYWdlcy9zYWxlcy9yZXR1cm5zL2VkaXQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNC0wIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vZWRpdC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNC0wIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vZWRpdC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/pages/sales/returns/edit.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./resources/js/pages/sales/returns/edit.vue?vue&type=template&id=51292422&scoped=true&":
/*!**********************************************************************************************!*\
  !*** ./resources/js/pages/sales/returns/edit.vue?vue&type=template&id=51292422&scoped=true& ***!
  \**********************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_6_node_modules_vue_loader_lib_index_js_vue_loader_options_edit_vue_vue_type_template_id_51292422_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../node_modules/babel-loader/lib??ref--4-0!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!../../../../../node_modules/vue-loader/lib??vue-loader-options!./edit.vue?vue&type=template&id=51292422&scoped=true& */ \"./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/pages/sales/returns/edit.vue?vue&type=template&id=51292422&scoped=true&\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_6_node_modules_vue_loader_lib_index_js_vue_loader_options_edit_vue_vue_type_template_id_51292422_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_6_node_modules_vue_loader_lib_index_js_vue_loader_options_edit_vue_vue_type_template_id_51292422_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvcGFnZXMvc2FsZXMvcmV0dXJucy9lZGl0LnZ1ZT84MWVkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSIsImZpbGUiOiIuL3Jlc291cmNlcy9qcy9wYWdlcy9zYWxlcy9yZXR1cm5zL2VkaXQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTUxMjkyNDIyJnNjb3BlZD10cnVlJi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTQtMCEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/cmVmLS02IS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vZWRpdC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NTEyOTI0MjImc2NvcGVkPXRydWUmXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/pages/sales/returns/edit.vue?vue&type=template&id=51292422&scoped=true&\n");

/***/ })

}]);